// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kazemisoroush/code-refactoring-tool/api/services (interfaces: CodebaseConfigService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kazemisoroush/code-refactoring-tool/api/models"
)

// MockCodebaseConfigService is a mock of CodebaseConfigService interface.
type MockCodebaseConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockCodebaseConfigServiceMockRecorder
}

// MockCodebaseConfigServiceMockRecorder is the mock recorder for MockCodebaseConfigService.
type MockCodebaseConfigServiceMockRecorder struct {
	mock *MockCodebaseConfigService
}

// NewMockCodebaseConfigService creates a new mock instance.
func NewMockCodebaseConfigService(ctrl *gomock.Controller) *MockCodebaseConfigService {
	mock := &MockCodebaseConfigService{ctrl: ctrl}
	mock.recorder = &MockCodebaseConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodebaseConfigService) EXPECT() *MockCodebaseConfigServiceMockRecorder {
	return m.recorder
}

// CreateCodebaseConfig mocks base method.
func (m *MockCodebaseConfigService) CreateCodebaseConfig(arg0 context.Context, arg1 models.CreateCodebaseConfigRequest) (*models.CreateCodebaseConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCodebaseConfig", arg0, arg1)
	ret0, _ := ret[0].(*models.CreateCodebaseConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCodebaseConfig indicates an expected call of CreateCodebaseConfig.
func (mr *MockCodebaseConfigServiceMockRecorder) CreateCodebaseConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCodebaseConfig", reflect.TypeOf((*MockCodebaseConfigService)(nil).CreateCodebaseConfig), arg0, arg1)
}

// DeleteCodebaseConfig mocks base method.
func (m *MockCodebaseConfigService) DeleteCodebaseConfig(arg0 context.Context, arg1 string) (*models.DeleteCodebaseConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCodebaseConfig", arg0, arg1)
	ret0, _ := ret[0].(*models.DeleteCodebaseConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCodebaseConfig indicates an expected call of DeleteCodebaseConfig.
func (mr *MockCodebaseConfigServiceMockRecorder) DeleteCodebaseConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCodebaseConfig", reflect.TypeOf((*MockCodebaseConfigService)(nil).DeleteCodebaseConfig), arg0, arg1)
}

// GetCodebaseConfig mocks base method.
func (m *MockCodebaseConfigService) GetCodebaseConfig(arg0 context.Context, arg1 string) (*models.GetCodebaseConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodebaseConfig", arg0, arg1)
	ret0, _ := ret[0].(*models.GetCodebaseConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodebaseConfig indicates an expected call of GetCodebaseConfig.
func (mr *MockCodebaseConfigServiceMockRecorder) GetCodebaseConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodebaseConfig", reflect.TypeOf((*MockCodebaseConfigService)(nil).GetCodebaseConfig), arg0, arg1)
}

// ListCodebaseConfigs mocks base method.
func (m *MockCodebaseConfigService) ListCodebaseConfigs(arg0 context.Context, arg1 models.ListCodebaseConfigsRequest) (*models.ListCodebaseConfigsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCodebaseConfigs", arg0, arg1)
	ret0, _ := ret[0].(*models.ListCodebaseConfigsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCodebaseConfigs indicates an expected call of ListCodebaseConfigs.
func (mr *MockCodebaseConfigServiceMockRecorder) ListCodebaseConfigs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodebaseConfigs", reflect.TypeOf((*MockCodebaseConfigService)(nil).ListCodebaseConfigs), arg0, arg1)
}

// UpdateCodebaseConfig mocks base method.
func (m *MockCodebaseConfigService) UpdateCodebaseConfig(arg0 context.Context, arg1 models.UpdateCodebaseConfigRequest) (*models.UpdateCodebaseConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCodebaseConfig", arg0, arg1)
	ret0, _ := ret[0].(*models.UpdateCodebaseConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCodebaseConfig indicates an expected call of UpdateCodebaseConfig.
func (mr *MockCodebaseConfigServiceMockRecorder) UpdateCodebaseConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCodebaseConfig", reflect.TypeOf((*MockCodebaseConfigService)(nil).UpdateCodebaseConfig), arg0, arg1)
}
