// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kazemisoroush/code-refactoring-tool/api/services (interfaces: CodebaseService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kazemisoroush/code-refactoring-tool/api/models"
)

// MockCodebaseService is a mock of CodebaseService interface.
type MockCodebaseService struct {
	ctrl     *gomock.Controller
	recorder *MockCodebaseServiceMockRecorder
}

// MockCodebaseServiceMockRecorder is the mock recorder for MockCodebaseService.
type MockCodebaseServiceMockRecorder struct {
	mock *MockCodebaseService
}

// NewMockCodebaseService creates a new mock instance.
func NewMockCodebaseService(ctrl *gomock.Controller) *MockCodebaseService {
	mock := &MockCodebaseService{ctrl: ctrl}
	mock.recorder = &MockCodebaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodebaseService) EXPECT() *MockCodebaseServiceMockRecorder {
	return m.recorder
}

// CreateCodebase mocks base method.
func (m *MockCodebaseService) CreateCodebase(arg0 context.Context, arg1 models.CreateCodebaseRequest) (*models.CreateCodebaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCodebase", arg0, arg1)
	ret0, _ := ret[0].(*models.CreateCodebaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCodebase indicates an expected call of CreateCodebase.
func (mr *MockCodebaseServiceMockRecorder) CreateCodebase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCodebase", reflect.TypeOf((*MockCodebaseService)(nil).CreateCodebase), arg0, arg1)
}

// DeleteCodebase mocks base method.
func (m *MockCodebaseService) DeleteCodebase(arg0 context.Context, arg1 string) (*models.DeleteCodebaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCodebase", arg0, arg1)
	ret0, _ := ret[0].(*models.DeleteCodebaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCodebase indicates an expected call of DeleteCodebase.
func (mr *MockCodebaseServiceMockRecorder) DeleteCodebase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCodebase", reflect.TypeOf((*MockCodebaseService)(nil).DeleteCodebase), arg0, arg1)
}

// GetCodebase mocks base method.
func (m *MockCodebaseService) GetCodebase(arg0 context.Context, arg1 string) (*models.GetCodebaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodebase", arg0, arg1)
	ret0, _ := ret[0].(*models.GetCodebaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodebase indicates an expected call of GetCodebase.
func (mr *MockCodebaseServiceMockRecorder) GetCodebase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodebase", reflect.TypeOf((*MockCodebaseService)(nil).GetCodebase), arg0, arg1)
}

// ListCodebases mocks base method.
func (m *MockCodebaseService) ListCodebases(arg0 context.Context, arg1 models.ListCodebasesRequest) (*models.ListCodebasesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCodebases", arg0, arg1)
	ret0, _ := ret[0].(*models.ListCodebasesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCodebases indicates an expected call of ListCodebases.
func (mr *MockCodebaseServiceMockRecorder) ListCodebases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodebases", reflect.TypeOf((*MockCodebaseService)(nil).ListCodebases), arg0, arg1)
}

// UpdateCodebase mocks base method.
func (m *MockCodebaseService) UpdateCodebase(arg0 context.Context, arg1 models.UpdateCodebaseRequest) (*models.UpdateCodebaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCodebase", arg0, arg1)
	ret0, _ := ret[0].(*models.UpdateCodebaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCodebase indicates an expected call of UpdateCodebase.
func (mr *MockCodebaseServiceMockRecorder) UpdateCodebase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCodebase", reflect.TypeOf((*MockCodebaseService)(nil).UpdateCodebase), arg0, arg1)
}
