// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kazemisoroush/code-refactoring-tool/api/repository (interfaces: CodebaseConfigRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repository "github.com/kazemisoroush/code-refactoring-tool/api/repository"
)

// MockCodebaseConfigRepository is a mock of CodebaseConfigRepository interface.
type MockCodebaseConfigRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCodebaseConfigRepositoryMockRecorder
}

// MockCodebaseConfigRepositoryMockRecorder is the mock recorder for MockCodebaseConfigRepository.
type MockCodebaseConfigRepositoryMockRecorder struct {
	mock *MockCodebaseConfigRepository
}

// NewMockCodebaseConfigRepository creates a new mock instance.
func NewMockCodebaseConfigRepository(ctrl *gomock.Controller) *MockCodebaseConfigRepository {
	mock := &MockCodebaseConfigRepository{ctrl: ctrl}
	mock.recorder = &MockCodebaseConfigRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodebaseConfigRepository) EXPECT() *MockCodebaseConfigRepositoryMockRecorder {
	return m.recorder
}

// CodebaseConfigExists mocks base method.
func (m *MockCodebaseConfigRepository) CodebaseConfigExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodebaseConfigExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CodebaseConfigExists indicates an expected call of CodebaseConfigExists.
func (mr *MockCodebaseConfigRepositoryMockRecorder) CodebaseConfigExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodebaseConfigExists", reflect.TypeOf((*MockCodebaseConfigRepository)(nil).CodebaseConfigExists), arg0, arg1)
}

// CreateCodebaseConfig mocks base method.
func (m *MockCodebaseConfigRepository) CreateCodebaseConfig(arg0 context.Context, arg1 *repository.CodebaseConfigRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCodebaseConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCodebaseConfig indicates an expected call of CreateCodebaseConfig.
func (mr *MockCodebaseConfigRepositoryMockRecorder) CreateCodebaseConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCodebaseConfig", reflect.TypeOf((*MockCodebaseConfigRepository)(nil).CreateCodebaseConfig), arg0, arg1)
}

// DeleteCodebaseConfig mocks base method.
func (m *MockCodebaseConfigRepository) DeleteCodebaseConfig(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCodebaseConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCodebaseConfig indicates an expected call of DeleteCodebaseConfig.
func (mr *MockCodebaseConfigRepositoryMockRecorder) DeleteCodebaseConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCodebaseConfig", reflect.TypeOf((*MockCodebaseConfigRepository)(nil).DeleteCodebaseConfig), arg0, arg1)
}

// GetCodebaseConfig mocks base method.
func (m *MockCodebaseConfigRepository) GetCodebaseConfig(arg0 context.Context, arg1 string) (*repository.CodebaseConfigRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodebaseConfig", arg0, arg1)
	ret0, _ := ret[0].(*repository.CodebaseConfigRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodebaseConfig indicates an expected call of GetCodebaseConfig.
func (mr *MockCodebaseConfigRepositoryMockRecorder) GetCodebaseConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodebaseConfig", reflect.TypeOf((*MockCodebaseConfigRepository)(nil).GetCodebaseConfig), arg0, arg1)
}

// ListCodebaseConfigs mocks base method.
func (m *MockCodebaseConfigRepository) ListCodebaseConfigs(arg0 context.Context, arg1 repository.ListCodebaseConfigsOptions) ([]*repository.CodebaseConfigRecord, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCodebaseConfigs", arg0, arg1)
	ret0, _ := ret[0].([]*repository.CodebaseConfigRecord)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCodebaseConfigs indicates an expected call of ListCodebaseConfigs.
func (mr *MockCodebaseConfigRepositoryMockRecorder) ListCodebaseConfigs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodebaseConfigs", reflect.TypeOf((*MockCodebaseConfigRepository)(nil).ListCodebaseConfigs), arg0, arg1)
}

// UpdateCodebaseConfig mocks base method.
func (m *MockCodebaseConfigRepository) UpdateCodebaseConfig(arg0 context.Context, arg1 *repository.CodebaseConfigRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCodebaseConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCodebaseConfig indicates an expected call of UpdateCodebaseConfig.
func (mr *MockCodebaseConfigRepositoryMockRecorder) UpdateCodebaseConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCodebaseConfig", reflect.TypeOf((*MockCodebaseConfigRepository)(nil).UpdateCodebaseConfig), arg0, arg1)
}
