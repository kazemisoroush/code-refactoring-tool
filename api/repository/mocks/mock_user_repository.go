// Code generated by MockGen. DO NOT EDIT.
// Source: user_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kazemisoroush/code-refactoring-tool/api/models"
	repository "github.com/kazemisoroush/code-refactoring-tool/api/repository"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user *models.DBUser) (*models.DBUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*models.DBUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), ctx, userID)
}

// GetUser mocks base method.
func (m *MockUserRepository) GetUser(ctx context.Context, userID string) (*models.DBUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(*models.DBUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryMockRecorder) GetUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), ctx, userID)
}

// GetUserByAuthID mocks base method.
func (m *MockUserRepository) GetUserByAuthID(ctx context.Context, authID string) (*models.DBUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAuthID", ctx, authID)
	ret0, _ := ret[0].(*models.DBUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAuthID indicates an expected call of GetUserByAuthID.
func (mr *MockUserRepositoryMockRecorder) GetUserByAuthID(ctx, authID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAuthID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByAuthID), ctx, authID)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (*models.DBUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*models.DBUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), ctx, email)
}

// GrantProjectAccess mocks base method.
func (m *MockUserRepository) GrantProjectAccess(ctx context.Context, userID, projectID, accessType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantProjectAccess", ctx, userID, projectID, accessType)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantProjectAccess indicates an expected call of GrantProjectAccess.
func (mr *MockUserRepositoryMockRecorder) GrantProjectAccess(ctx, userID, projectID, accessType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantProjectAccess", reflect.TypeOf((*MockUserRepository)(nil).GrantProjectAccess), ctx, userID, projectID, accessType)
}

// HasProjectAccess mocks base method.
func (m *MockUserRepository) HasProjectAccess(ctx context.Context, userID, projectID, accessType string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasProjectAccess", ctx, userID, projectID, accessType)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasProjectAccess indicates an expected call of HasProjectAccess.
func (mr *MockUserRepositoryMockRecorder) HasProjectAccess(ctx, userID, projectID, accessType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasProjectAccess", reflect.TypeOf((*MockUserRepository)(nil).HasProjectAccess), ctx, userID, projectID, accessType)
}

// ListUsers mocks base method.
func (m *MockUserRepository) ListUsers(ctx context.Context, filter *repository.ListUsersFilter) ([]*models.DBUser, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, filter)
	ret0, _ := ret[0].([]*models.DBUser)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUserRepositoryMockRecorder) ListUsers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserRepository)(nil).ListUsers), ctx, filter)
}

// RevokeProjectAccess mocks base method.
func (m *MockUserRepository) RevokeProjectAccess(ctx context.Context, userID, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeProjectAccess", ctx, userID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeProjectAccess indicates an expected call of RevokeProjectAccess.
func (mr *MockUserRepositoryMockRecorder) RevokeProjectAccess(ctx, userID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeProjectAccess", reflect.TypeOf((*MockUserRepository)(nil).RevokeProjectAccess), ctx, userID, projectID)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(ctx context.Context, user *models.DBUser) (*models.DBUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(*models.DBUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), ctx, user)
}

// UserExists mocks base method.
func (m *MockUserRepository) UserExists(ctx context.Context, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockUserRepositoryMockRecorder) UserExists(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockUserRepository)(nil).UserExists), ctx, userID)
}
