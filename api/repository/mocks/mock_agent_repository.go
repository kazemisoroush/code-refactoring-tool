// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kazemisoroush/code-refactoring-tool/api/repository (interfaces: AgentRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kazemisoroush/code-refactoring-tool/api/models"
	repository "github.com/kazemisoroush/code-refactoring-tool/api/repository"
)

// MockAgentRepository is a mock of AgentRepository interface.
type MockAgentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAgentRepositoryMockRecorder
}

// MockAgentRepositoryMockRecorder is the mock recorder for MockAgentRepository.
type MockAgentRepositoryMockRecorder struct {
	mock *MockAgentRepository
}

// NewMockAgentRepository creates a new mock instance.
func NewMockAgentRepository(ctrl *gomock.Controller) *MockAgentRepository {
	mock := &MockAgentRepository{ctrl: ctrl}
	mock.recorder = &MockAgentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentRepository) EXPECT() *MockAgentRepositoryMockRecorder {
	return m.recorder
}

// CreateAgent mocks base method.
func (m *MockAgentRepository) CreateAgent(arg0 context.Context, arg1 *repository.AgentRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAgent indicates an expected call of CreateAgent.
func (mr *MockAgentRepositoryMockRecorder) CreateAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgent", reflect.TypeOf((*MockAgentRepository)(nil).CreateAgent), arg0, arg1)
}

// DeleteAgent mocks base method.
func (m *MockAgentRepository) DeleteAgent(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAgent indicates an expected call of DeleteAgent.
func (mr *MockAgentRepositoryMockRecorder) DeleteAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgent", reflect.TypeOf((*MockAgentRepository)(nil).DeleteAgent), arg0, arg1)
}

// GetAgent mocks base method.
func (m *MockAgentRepository) GetAgent(arg0 context.Context, arg1 string) (*repository.AgentRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgent", arg0, arg1)
	ret0, _ := ret[0].(*repository.AgentRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgent indicates an expected call of GetAgent.
func (mr *MockAgentRepositoryMockRecorder) GetAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgent", reflect.TypeOf((*MockAgentRepository)(nil).GetAgent), arg0, arg1)
}

// ListAgents mocks base method.
func (m *MockAgentRepository) ListAgents(arg0 context.Context) ([]*repository.AgentRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgents", arg0)
	ret0, _ := ret[0].([]*repository.AgentRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgents indicates an expected call of ListAgents.
func (mr *MockAgentRepositoryMockRecorder) ListAgents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgents", reflect.TypeOf((*MockAgentRepository)(nil).ListAgents), arg0)
}

// UpdateAgent mocks base method.
func (m *MockAgentRepository) UpdateAgent(arg0 context.Context, arg1 *repository.AgentRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgent indicates an expected call of UpdateAgent.
func (mr *MockAgentRepositoryMockRecorder) UpdateAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgent", reflect.TypeOf((*MockAgentRepository)(nil).UpdateAgent), arg0, arg1)
}

// UpdateAgentStatus mocks base method.
func (m *MockAgentRepository) UpdateAgentStatus(arg0 context.Context, arg1 string, arg2 models.AgentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentStatus indicates an expected call of UpdateAgentStatus.
func (mr *MockAgentRepositoryMockRecorder) UpdateAgentStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentStatus", reflect.TypeOf((*MockAgentRepository)(nil).UpdateAgentStatus), arg0, arg1, arg2)
}
