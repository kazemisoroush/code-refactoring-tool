// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kazemisoroush/code-refactoring-tool/api/repository (interfaces: CodebaseRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kazemisoroush/code-refactoring-tool/api/models"
	repository "github.com/kazemisoroush/code-refactoring-tool/api/repository"
)

// MockCodebaseRepository is a mock of CodebaseRepository interface.
type MockCodebaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCodebaseRepositoryMockRecorder
}

// MockCodebaseRepositoryMockRecorder is the mock recorder for MockCodebaseRepository.
type MockCodebaseRepositoryMockRecorder struct {
	mock *MockCodebaseRepository
}

// NewMockCodebaseRepository creates a new mock instance.
func NewMockCodebaseRepository(ctrl *gomock.Controller) *MockCodebaseRepository {
	mock := &MockCodebaseRepository{ctrl: ctrl}
	mock.recorder = &MockCodebaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodebaseRepository) EXPECT() *MockCodebaseRepositoryMockRecorder {
	return m.recorder
}

// CodebaseExists mocks base method.
func (m *MockCodebaseRepository) CodebaseExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodebaseExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CodebaseExists indicates an expected call of CodebaseExists.
func (mr *MockCodebaseRepositoryMockRecorder) CodebaseExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodebaseExists", reflect.TypeOf((*MockCodebaseRepository)(nil).CodebaseExists), arg0, arg1)
}

// CreateCodebase mocks base method.
func (m *MockCodebaseRepository) CreateCodebase(arg0 context.Context, arg1 *models.Codebase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCodebase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCodebase indicates an expected call of CreateCodebase.
func (mr *MockCodebaseRepositoryMockRecorder) CreateCodebase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCodebase", reflect.TypeOf((*MockCodebaseRepository)(nil).CreateCodebase), arg0, arg1)
}

// DeleteCodebase mocks base method.
func (m *MockCodebaseRepository) DeleteCodebase(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCodebase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCodebase indicates an expected call of DeleteCodebase.
func (mr *MockCodebaseRepositoryMockRecorder) DeleteCodebase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCodebase", reflect.TypeOf((*MockCodebaseRepository)(nil).DeleteCodebase), arg0, arg1)
}

// GetCodebase mocks base method.
func (m *MockCodebaseRepository) GetCodebase(arg0 context.Context, arg1 string) (*models.Codebase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodebase", arg0, arg1)
	ret0, _ := ret[0].(*models.Codebase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodebase indicates an expected call of GetCodebase.
func (mr *MockCodebaseRepositoryMockRecorder) GetCodebase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodebase", reflect.TypeOf((*MockCodebaseRepository)(nil).GetCodebase), arg0, arg1)
}

// GetCodebasesByProject mocks base method.
func (m *MockCodebaseRepository) GetCodebasesByProject(arg0 context.Context, arg1 string) ([]*models.Codebase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodebasesByProject", arg0, arg1)
	ret0, _ := ret[0].([]*models.Codebase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodebasesByProject indicates an expected call of GetCodebasesByProject.
func (mr *MockCodebaseRepositoryMockRecorder) GetCodebasesByProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodebasesByProject", reflect.TypeOf((*MockCodebaseRepository)(nil).GetCodebasesByProject), arg0, arg1)
}

// ListCodebases mocks base method.
func (m *MockCodebaseRepository) ListCodebases(arg0 context.Context, arg1 repository.CodebaseFilter) ([]*models.Codebase, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCodebases", arg0, arg1)
	ret0, _ := ret[0].([]*models.Codebase)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCodebases indicates an expected call of ListCodebases.
func (mr *MockCodebaseRepositoryMockRecorder) ListCodebases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodebases", reflect.TypeOf((*MockCodebaseRepository)(nil).ListCodebases), arg0, arg1)
}

// UpdateCodebase mocks base method.
func (m *MockCodebaseRepository) UpdateCodebase(arg0 context.Context, arg1 *models.Codebase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCodebase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCodebase indicates an expected call of UpdateCodebase.
func (mr *MockCodebaseRepositoryMockRecorder) UpdateCodebase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCodebase", reflect.TypeOf((*MockCodebaseRepository)(nil).UpdateCodebase), arg0, arg1)
}
