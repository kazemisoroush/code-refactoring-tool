services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama for local LLM
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0:11434

  # ChromaDB for local vector storage
  chromadb:
    image: chromadb/chroma:latest
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=TRUE

  # Code Refactoring Tool API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT}:8080"
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SSL_MODE=${POSTGRES_SSL_MODE}
      - AI_LOCAL_ENABLED=${AI_LOCAL_ENABLED}
      - AI_LOCAL_OLLAMA_URL=${AI_LOCAL_OLLAMA_URL}
      - AI_LOCAL_MODEL=${AI_LOCAL_MODEL}
      - AI_LOCAL_CHROMA_URL=${AI_LOCAL_CHROMA_URL}
      - AI_LOCAL_EMBEDDING_MODEL=${AI_LOCAL_EMBEDDING_MODEL}
      - AI_DEFAULT_PROVIDER=${AI_DEFAULT_PROVIDER}
      - AI_BEDROCK_REGION=${AI_BEDROCK_REGION}
      - AI_BEDROCK_KNOWLEDGE_BASE_SERVICE_ROLE_ARN=${AI_BEDROCK_KNOWLEDGE_BASE_SERVICE_ROLE_ARN:-}
      - AI_BEDROCK_AGENT_SERVICE_ROLE_ARN=${AI_BEDROCK_AGENT_SERVICE_ROLE_ARN:-}
      - AI_BEDROCK_S3_BUCKET_NAME=${AI_BEDROCK_S3_BUCKET_NAME:-}
      - AI_BEDROCK_RDS_POSTGRES_CREDENTIALS_SECRET_ARN=${AI_BEDROCK_RDS_POSTGRES_CREDENTIALS_SECRET_ARN:-}
      - AI_BEDROCK_RDS_POSTGRES_SCHEMA_ENSURE_LAMBDA_ARN=${AI_BEDROCK_RDS_POSTGRES_SCHEMA_ENSURE_LAMBDA_ARN:-}
      - AI_BEDROCK_RDS_POSTGRES_INSTANCE_ARN=${AI_BEDROCK_RDS_POSTGRES_INSTANCE_ARN:-}
      - AI_BEDROCK_RDS_POSTGRES_DATABASE_NAME=${AI_BEDROCK_RDS_POSTGRES_DATABASE_NAME:-code_refactoring_db}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
      - COGNITO_REGION=${COGNITO_REGION}
      - GIT_TOKEN=${GIT_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL}
      - GIN_MODE=${GIN_MODE}
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_started
      chromadb:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  ollama_data:
  chroma_data:
