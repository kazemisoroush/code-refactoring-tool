// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kazemisoroush/code-refactoring-tool/pkg/ai/rag (interfaces: RAG)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRAG is a mock of RAG interface.
type MockRAG struct {
	ctrl     *gomock.Controller
	recorder *MockRAGMockRecorder
}

// MockRAGMockRecorder is the mock recorder for MockRAG.
type MockRAGMockRecorder struct {
	mock *MockRAG
}

// NewMockRAG creates a new mock instance.
func NewMockRAG(ctrl *gomock.Controller) *MockRAG {
	mock := &MockRAG{ctrl: ctrl}
	mock.recorder = &MockRAGMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRAG) EXPECT() *MockRAGMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRAG) Create(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRAGMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRAG)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRAG) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRAGMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRAG)(nil).Delete), arg0, arg1)
}
