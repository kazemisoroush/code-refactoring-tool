// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kazemisoroush/code-refactoring-tool/pkg/ai/storage (interfaces: Vector)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVector is a mock of Vector interface.
type MockVector struct {
	ctrl     *gomock.Controller
	recorder *MockVectorMockRecorder
}

// MockVectorMockRecorder is the mock recorder for MockVector.
type MockVectorMockRecorder struct {
	mock *MockVector
}

// NewMockVector creates a new mock instance.
func NewMockVector(ctrl *gomock.Controller) *MockVector {
	mock := &MockVector{ctrl: ctrl}
	mock.recorder = &MockVectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVector) EXPECT() *MockVectorMockRecorder {
	return m.recorder
}

// DropSchema mocks base method.
func (m *MockVector) DropSchema(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropSchema", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropSchema indicates an expected call of DropSchema.
func (mr *MockVectorMockRecorder) DropSchema(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropSchema", reflect.TypeOf((*MockVector)(nil).DropSchema), arg0, arg1)
}

// EnsureSchema mocks base method.
func (m *MockVector) EnsureSchema(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureSchema", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureSchema indicates an expected call of EnsureSchema.
func (mr *MockVectorMockRecorder) EnsureSchema(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureSchema", reflect.TypeOf((*MockVector)(nil).EnsureSchema), arg0, arg1)
}
