// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kazemisoroush/code-refactoring-tool/pkg/ai/vector (interfaces: VectorStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVectorStore is a mock of VectorStore interface.
type MockVectorStore struct {
	ctrl     *gomock.Controller
	recorder *MockVectorStoreMockRecorder
}

// MockVectorStoreMockRecorder is the mock recorder for MockVectorStore.
type MockVectorStoreMockRecorder struct {
	mock *MockVectorStore
}

// NewMockVectorStore creates a new mock instance.
func NewMockVectorStore(ctrl *gomock.Controller) *MockVectorStore {
	mock := &MockVectorStore{ctrl: ctrl}
	mock.recorder = &MockVectorStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVectorStore) EXPECT() *MockVectorStoreMockRecorder {
	return m.recorder
}

// DropSchema mocks base method.
func (m *MockVectorStore) DropSchema(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropSchema", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropSchema indicates an expected call of DropSchema.
func (mr *MockVectorStoreMockRecorder) DropSchema(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropSchema", reflect.TypeOf((*MockVectorStore)(nil).DropSchema), arg0, arg1)
}

// EnsureSchema mocks base method.
func (m *MockVectorStore) EnsureSchema(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureSchema", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureSchema indicates an expected call of EnsureSchema.
func (mr *MockVectorStoreMockRecorder) EnsureSchema(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureSchema", reflect.TypeOf((*MockVectorStore)(nil).EnsureSchema), arg0, arg1)
}
