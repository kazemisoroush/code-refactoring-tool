// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kazemisoroush/code-refactoring-tool/pkg/ai/builder (interfaces: RAGBuilder)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRAGBuilder is a mock of RAGBuilder interface.
type MockRAGBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockRAGBuilderMockRecorder
}

// MockRAGBuilderMockRecorder is the mock recorder for MockRAGBuilder.
type MockRAGBuilderMockRecorder struct {
	mock *MockRAGBuilder
}

// NewMockRAGBuilder creates a new mock instance.
func NewMockRAGBuilder(ctrl *gomock.Controller) *MockRAGBuilder {
	mock := &MockRAGBuilder{ctrl: ctrl}
	mock.recorder = &MockRAGBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRAGBuilder) EXPECT() *MockRAGBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockRAGBuilder) Build(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockRAGBuilderMockRecorder) Build(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockRAGBuilder)(nil).Build), arg0)
}

// TearDown mocks base method.
func (m *MockRAGBuilder) TearDown(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TearDown", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TearDown indicates an expected call of TearDown.
func (mr *MockRAGBuilderMockRecorder) TearDown(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TearDown", reflect.TypeOf((*MockRAGBuilder)(nil).TearDown), arg0, arg1, arg2)
}
