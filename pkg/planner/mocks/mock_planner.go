// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kazemisoroush/code-refactoring-tool/pkg/planner (interfaces: Planner)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kazemisoroush/code-refactoring-tool/pkg/analyzer/models"
	models0 "github.com/kazemisoroush/code-refactoring-tool/pkg/planner/models"
)

// MockPlanner is a mock of Planner interface.
type MockPlanner struct {
	ctrl     *gomock.Controller
	recorder *MockPlannerMockRecorder
}

// MockPlannerMockRecorder is the mock recorder for MockPlanner.
type MockPlannerMockRecorder struct {
	mock *MockPlanner
}

// NewMockPlanner creates a new mock instance.
func NewMockPlanner(ctrl *gomock.Controller) *MockPlanner {
	mock := &MockPlanner{ctrl: ctrl}
	mock.recorder = &MockPlannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanner) EXPECT() *MockPlannerMockRecorder {
	return m.recorder
}

// CreatePrompt mocks base method.
func (m *MockPlanner) CreatePrompt(arg0 []models.CodeIssue) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrompt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrompt indicates an expected call of CreatePrompt.
func (mr *MockPlannerMockRecorder) CreatePrompt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrompt", reflect.TypeOf((*MockPlanner)(nil).CreatePrompt), arg0)
}

// Plan mocks base method.
func (m *MockPlanner) Plan(arg0 context.Context, arg1 string, arg2 []models.CodeIssue) (models0.Plan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plan", arg0, arg1, arg2)
	ret0, _ := ret[0].(models0.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Plan indicates an expected call of Plan.
func (mr *MockPlannerMockRecorder) Plan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plan", reflect.TypeOf((*MockPlanner)(nil).Plan), arg0, arg1, arg2)
}
