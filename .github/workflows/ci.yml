name: Go Refactoring Tool CI

on:
  push:
    branches:
      - main
      - '**'  # All branches
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'
          cache: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r infra/rds_schema_lambda/requirements_test.txt
          pip install pylint

      - name: Install Go Dependencies
        run: |
          go mod tidy
          cd infra/stack && go mod tidy

      - name: Install golangci-lint v2
        run: |
          curl -sSfL https://github.com/golangci/golangci-lint/releases/download/v2.0.0/golangci-lint-2.0.0-linux-amd64.tar.gz | tar -xz
          sudo mv golangci-lint-2.0.0-linux-amd64/golangci-lint /usr/local/bin/
          golangci-lint version

      - name: Run Linter
        run: |
          golangci-lint -v run
          cd infra/stack && golangci-lint -v run

      - name: Run Python Linting
        run: |
          cd infra/rds_schema_lambda && pylint --rcfile=../../.pylintrc *.py

      - name: Run Tests
        run: |
          go test -v ./...

      - name: Run Infra Tests
        run: |
          cd infra/stack && go test -v ./...

      - name: Run Lambda Tests
        run: |
          cd infra/rds_schema_lambda && pytest .

  build-and-push:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'
          cache: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Application
        run: |
          go mod tidy
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main ./cmd/api

      - name: Build, tag, and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: refactor-ecr-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-only:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref != 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'
          cache: false

      - name: Build Application
        run: |
          go mod tidy
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main ./cmd/api

      - name: Build Docker image (no push)
        run: |
          docker build -t code-refactor-tool:${{ github.sha }} .
