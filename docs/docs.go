// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/agents": {
            "get": {
                "description": "Get a list of agents with optional pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "List all agents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token for pagination",
                        "name": "next_token",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "name": "max_results",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of agents",
                        "schema": {
                            "$ref": "#/definitions/ListAgentsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new agent for code analysis with the specified repository",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Create a new agent",
                "parameters": [
                    {
                        "description": "Agent creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateAgentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Agent created successfully",
                        "schema": {
                            "$ref": "#/definitions/CreateAgentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents/{agent_id}": {
            "put": {
                "description": "Update an agent's configuration and settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Update an existing agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "agent_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Agent update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateAgentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent updated successfully",
                        "schema": {
                            "$ref": "#/definitions/UpdateAgentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents/{id}": {
            "get": {
                "description": "Retrieve agent information by agent ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Get an agent by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent found",
                        "schema": {
                            "$ref": "#/definitions/GetAgentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid agent ID",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an agent and its associated resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Delete an agent by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/DeleteAgentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid agent ID",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/tasks": {
            "get": {
                "description": "List all tasks for a specific project with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "List tasks for a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "pending",
                            "in_progress",
                            "completed",
                            "failed",
                            "cancelled"
                        ],
                        "type": "string",
                        "description": "Filter by task status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "code_analysis",
                            "refactoring",
                            "code_review",
                            "documentation",
                            "custom"
                        ],
                        "type": "string",
                        "description": "Filter by task type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by agent ID",
                        "name": "agent_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results to return (default 20, max 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results to skip (default 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ListTasksResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new task for a specific project and agent",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Create a new task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/CreateTaskResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/tasks/execute": {
            "post": {
                "description": "Create and execute a task immediately (synchronously or asynchronously)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Execute a task immediately",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task execution request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExecuteTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Synchronous execution completed",
                        "schema": {
                            "$ref": "#/definitions/ExecuteTaskResponse"
                        }
                    },
                    "202": {
                        "description": "Asynchronous execution started",
                        "schema": {
                            "$ref": "#/definitions/ExecuteTaskResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tasks/{id}": {
            "get": {
                "description": "Retrieve a task by its unique identifier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get a task by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GetTaskResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing task's status, output, or metadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Update a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UpdateTaskResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a task by its unique identifier",
                "tags": [
                    "tasks"
                ],
                "summary": "Delete a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refresh an access token using a refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/signin": {
            "post": {
                "description": "Authenticate a user and return access tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate a user",
                "parameters": [
                    {
                        "description": "Sign in request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SignInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SignInResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/signout": {
            "post": {
                "description": "Sign out a user and invalidate tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Sign out a user",
                "parameters": [
                    {
                        "description": "Sign out request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SignOutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Register a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Sign up request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.SignUpResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/users": {
            "get": {
                "description": "List users with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "List users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of users to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of users to skip",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by user role",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by user status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ListUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user account (admin operation)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Create a new user (Admin)",
                "parameters": [
                    {
                        "description": "Create user request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/users/{id}": {
            "get": {
                "description": "Get user information by user ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.GetUserResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update user request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user account",
                "tags": [
                    "authentication"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/codebases": {
            "get": {
                "description": "Retrieve a list of codebases with optional pagination and filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "codebases"
                ],
                "summary": "List codebases",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by project ID",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tag filter in format key:value",
                        "name": "tag_filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token for pagination",
                        "name": "next_token",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "name": "max_results",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Codebases retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ListCodebasesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/codebases/{id}": {
            "get": {
                "description": "Retrieve a codebase by its unique identifier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "codebases"
                ],
                "summary": "Get a codebase by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Codebase ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Codebase retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GetCodebaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid codebase ID",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Codebase not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing codebase's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "codebases"
                ],
                "summary": "Update a codebase",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Codebase ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Codebase update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateCodebaseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Codebase updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateCodebaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Codebase not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a codebase by its unique identifier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "codebases"
                ],
                "summary": "Delete a codebase",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Codebase ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Codebase deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.DeleteCodebaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid codebase ID",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Codebase not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns the health status of the service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/HealthCheckResponse"
                        }
                    },
                    "500": {
                        "description": "Service is unhealthy",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects": {
            "get": {
                "description": "Retrieve a list of projects with optional pagination and filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "List projects",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token for pagination",
                        "name": "next_token",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "name": "max_results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tag filter in format key:value",
                        "name": "tag_filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Projects retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/ListProjectsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new project for organizing codebases and agents",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Create a new project",
                "parameters": [
                    {
                        "description": "Project creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Project created successfully",
                        "schema": {
                            "$ref": "#/definitions/CreateProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{id}": {
            "get": {
                "description": "Retrieve a project by its unique identifier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get a project by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/GetProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing project's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Update a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Project update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project updated successfully",
                        "schema": {
                            "$ref": "#/definitions/UpdateProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a project by its unique identifier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Delete a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/DeleteProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{project_id}/codebases": {
            "post": {
                "description": "Create a new codebase attached to a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "codebases"
                ],
                "summary": "Create a new codebase",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Codebase creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateCodebaseRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Codebase created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.CreateCodebaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "AgentSummary": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "description": "Unique identifier for the agent",
                    "type": "string",
                    "example": "agent-12345"
                },
                "agent_name": {
                    "description": "Agent name",
                    "type": "string",
                    "example": "my-code-analyzer"
                },
                "created_at": {
                    "description": "Timestamp when the agent was created",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "repository_url": {
                    "description": "Repository URL",
                    "type": "string",
                    "example": "https://github.com/user/repo"
                },
                "status": {
                    "description": "Agent status",
                    "type": "string",
                    "example": "ready"
                }
            }
        },
        "CreateAgentRequest": {
            "type": "object",
            "required": [
                "repository_url"
            ],
            "properties": {
                "agent_name": {
                    "description": "Optional custom agent name",
                    "type": "string",
                    "minLength": 1,
                    "example": "my-code-analyzer"
                },
                "ai_config": {
                    "description": "AI configuration for the agent",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.AgentAIConfig"
                        }
                    ]
                },
                "branch": {
                    "description": "Optional branch name, defaults to main",
                    "type": "string",
                    "minLength": 1,
                    "example": "main"
                },
                "repository_url": {
                    "description": "Repository URL to analyze",
                    "type": "string",
                    "example": "https://github.com/user/repo"
                }
            }
        },
        "CreateAgentResponse": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "description": "Unique identifier for the agent",
                    "type": "string",
                    "example": "agent-12345"
                },
                "agent_version": {
                    "description": "Agent version",
                    "type": "string",
                    "example": "v1.0.0"
                },
                "created_at": {
                    "description": "Timestamp when the agent was created",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "knowledge_base_id": {
                    "description": "Knowledge base ID associated with the agent",
                    "type": "string",
                    "example": "kb-67890"
                },
                "status": {
                    "description": "Agent creation status",
                    "type": "string",
                    "example": "created"
                },
                "vector_store_id": {
                    "description": "Vector store ID for the knowledge base",
                    "type": "string",
                    "example": "vs-abcde"
                }
            }
        },
        "CreateProjectRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Optional project summary",
                    "type": "string",
                    "maxLength": 500,
                    "example": "A sample project for code analysis"
                },
                "language": {
                    "description": "Optional programming language",
                    "type": "string",
                    "enum": [
                        "go",
                        "javascript",
                        "typescript",
                        "python",
                        "java",
                        "csharp",
                        "rust",
                        "cpp",
                        "c",
                        "ruby",
                        "php",
                        "kotlin",
                        "swift",
                        "scala",
                        "other"
                    ],
                    "example": "go"
                },
                "name": {
                    "description": "Human-readable project name",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "my-project"
                },
                "tags": {
                    "description": "Optional user-defined key-value tags",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "env": "prod",
                        "team": "backend"
                    }
                }
            }
        },
        "CreateProjectResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the project was created",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "project_id": {
                    "description": "Unique identifier for the project",
                    "type": "string",
                    "example": "12345-abcde"
                }
            }
        },
        "CreateTaskRequest": {
            "type": "object"
        },
        "CreateTaskResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TaskStatus"
                        }
                    ],
                    "example": "pending"
                },
                "task_id": {
                    "type": "string",
                    "example": "task-12345-abcde"
                }
            }
        },
        "DeleteAgentResponse": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "description": "Agent ID that was deleted",
                    "type": "string",
                    "example": "agent-12345"
                },
                "success": {
                    "description": "Success indicator",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "DeleteProjectResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "description": "Indicates whether the deletion was successful",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code",
                    "type": "integer",
                    "example": 400
                },
                "details": {
                    "description": "Optional error details",
                    "type": "string",
                    "example": "repository_url is required"
                },
                "message": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Invalid request parameters"
                }
            }
        },
        "ExecuteTaskRequest": {
            "type": "object"
        },
        "ExecuteTaskResponse": {
            "type": "object",
            "properties": {
                "completed_at": {
                    "type": "string",
                    "example": "2024-01-15T10:35:00Z"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "output": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TaskStatus"
                        }
                    ],
                    "example": "completed"
                },
                "task_id": {
                    "type": "string",
                    "example": "task-12345-abcde"
                }
            }
        },
        "GetAgentResponse": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "description": "Unique identifier for the agent",
                    "type": "string",
                    "example": "agent-12345"
                },
                "agent_name": {
                    "description": "Agent name",
                    "type": "string",
                    "example": "my-code-analyzer"
                },
                "agent_version": {
                    "description": "Agent version",
                    "type": "string",
                    "example": "v1.0.0"
                },
                "branch": {
                    "description": "Branch name",
                    "type": "string",
                    "example": "main"
                },
                "created_at": {
                    "description": "Timestamp when the agent was created",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "knowledge_base_id": {
                    "description": "Knowledge base ID associated with the agent",
                    "type": "string",
                    "example": "kb-67890"
                },
                "repository_url": {
                    "description": "Repository URL",
                    "type": "string",
                    "example": "https://github.com/user/repo"
                },
                "status": {
                    "description": "Agent status",
                    "type": "string",
                    "example": "ready"
                },
                "updated_at": {
                    "description": "Timestamp when the agent was last updated",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "vector_store_id": {
                    "description": "Vector store ID for the knowledge base",
                    "type": "string",
                    "example": "vs-abcde"
                }
            }
        },
        "GetProjectResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the project was created",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "description": {
                    "description": "Optional project summary",
                    "type": "string",
                    "example": "A sample project for code analysis"
                },
                "language": {
                    "description": "Optional programming language",
                    "type": "string",
                    "example": "go"
                },
                "metadata": {
                    "description": "Optional metadata",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "version": "1.0.0"
                    }
                },
                "name": {
                    "description": "Human-readable project name",
                    "type": "string",
                    "example": "my-project"
                },
                "project_id": {
                    "description": "Unique identifier for the project",
                    "type": "string",
                    "example": "12345-abcde"
                },
                "tags": {
                    "description": "Optional user-defined key-value tags",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "env": "prod",
                        "team": "backend"
                    }
                },
                "updated_at": {
                    "description": "Timestamp when the project was last updated",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                }
            }
        },
        "GetTaskResponse": {
            "type": "object",
            "properties": {
                "agent": {
                    "$ref": "#/definitions/models.Agent"
                },
                "agent_id": {
                    "description": "Which agent to use for this task",
                    "type": "string"
                },
                "codebase": {
                    "$ref": "#/definitions/models.Codebase"
                },
                "codebase_id": {
                    "description": "Optional: specific codebase, if nil uses all project codebases",
                    "type": "string"
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "description": "User's prompt/instructions",
                    "type": "string"
                },
                "error_message": {
                    "type": "string"
                },
                "execution_context": {
                    "description": "Enhanced execution context (populated when requested)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TaskExecutionContext"
                        }
                    ]
                },
                "input": {
                    "description": "Additional input parameters",
                    "type": "object",
                    "additionalProperties": {}
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "output": {
                    "description": "Task results",
                    "type": "object",
                    "additionalProperties": {}
                },
                "project": {
                    "description": "Relationship data (populated when requested)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Project"
                        }
                    ]
                },
                "project_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.TaskStatus"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "task_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.TaskType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "HealthCheckResponse": {
            "type": "object",
            "properties": {
                "service": {
                    "description": "Service name",
                    "type": "string",
                    "example": "code-refactor-tool-api"
                },
                "status": {
                    "description": "Service status",
                    "type": "string",
                    "example": "healthy"
                },
                "timestamp": {
                    "description": "Current timestamp",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "uptime": {
                    "description": "Uptime in seconds (optional)",
                    "type": "integer",
                    "example": 3600
                },
                "version": {
                    "description": "Service version",
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "ListAgentsResponse": {
            "type": "object",
            "properties": {
                "agents": {
                    "description": "List of agent summaries",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgentSummary"
                    }
                },
                "next_token": {
                    "description": "Token for next page",
                    "type": "string",
                    "example": "eyJ0aW1lc3RhbXAiOiIyMDI0LTAxLTE1VDEwOjMwOjAwWiJ9"
                }
            }
        },
        "ListProjectsResponse": {
            "type": "object",
            "properties": {
                "next_token": {
                    "description": "Token for next page of results",
                    "type": "string",
                    "example": "eyJpZCI6InByb2otNjc4OTAifQ=="
                },
                "projects": {
                    "description": "List of project summaries",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProjectSummary"
                    }
                }
            }
        },
        "ListTasksResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Task"
                    }
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "ProjectSummary": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the project was created",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "name": {
                    "description": "Human-readable project name",
                    "type": "string",
                    "example": "my-project"
                },
                "project_id": {
                    "description": "Unique identifier for the project",
                    "type": "string",
                    "example": "12345-abcde"
                },
                "tags": {
                    "description": "Optional user-defined key-value tags",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "env": "prod",
                        "team": "backend"
                    }
                }
            }
        },
        "SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Success message",
                    "type": "string",
                    "example": "Operation completed successfully"
                }
            }
        },
        "UpdateAgentRequest": {
            "type": "object",
            "properties": {
                "agent_name": {
                    "description": "Optional new agent name",
                    "type": "string",
                    "minLength": 1,
                    "example": "updated-code-analyzer"
                },
                "ai_config": {
                    "description": "Optional AI configuration updates",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.AgentAIConfig"
                        }
                    ]
                },
                "branch": {
                    "description": "Optional updated branch name",
                    "type": "string",
                    "minLength": 1,
                    "example": "develop"
                },
                "repository_url": {
                    "description": "Optional updated repository URL",
                    "type": "string",
                    "example": "https://github.com/user/updated-repo"
                }
            }
        },
        "UpdateAgentResponse": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "description": "Unique identifier for the agent",
                    "type": "string",
                    "example": "agent-12345"
                },
                "agent_name": {
                    "description": "Agent name",
                    "type": "string",
                    "example": "updated-code-analyzer"
                },
                "agent_version": {
                    "description": "Agent version",
                    "type": "string",
                    "example": "v1.1.0"
                },
                "branch": {
                    "description": "Branch name",
                    "type": "string",
                    "example": "develop"
                },
                "created_at": {
                    "description": "Timestamp when the agent was created",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "knowledge_base_id": {
                    "description": "Knowledge base ID associated with the agent",
                    "type": "string",
                    "example": "kb-67890"
                },
                "repository_url": {
                    "description": "Repository URL",
                    "type": "string",
                    "example": "https://github.com/user/updated-repo"
                },
                "status": {
                    "description": "Agent status",
                    "type": "string",
                    "example": "ready"
                },
                "updated_at": {
                    "description": "Timestamp when the agent was last updated",
                    "type": "string",
                    "example": "2024-01-15T11:45:00Z"
                },
                "vector_store_id": {
                    "description": "Vector store ID for the knowledge base",
                    "type": "string",
                    "example": "vs-abcde"
                }
            }
        },
        "UpdateProjectRequest": {
            "type": "object",
            "required": [
                "projectID"
            ],
            "properties": {
                "description": {
                    "description": "Optional project summary",
                    "type": "string",
                    "maxLength": 500,
                    "example": "Updated project description"
                },
                "language": {
                    "description": "Optional programming language",
                    "type": "string",
                    "enum": [
                        "go",
                        "javascript",
                        "typescript",
                        "python",
                        "java",
                        "csharp",
                        "rust",
                        "cpp",
                        "c",
                        "ruby",
                        "php",
                        "kotlin",
                        "swift",
                        "scala",
                        "other"
                    ],
                    "example": "python"
                },
                "metadata": {
                    "description": "Optional metadata",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "version": "1.1.0"
                    }
                },
                "name": {
                    "description": "Optional human-readable project name",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "updated-project"
                },
                "projectID": {
                    "description": "Unique identifier for the project",
                    "type": "string",
                    "example": "12345-abcde"
                },
                "tags": {
                    "description": "Optional user-defined key-value tags",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "env": "staging",
                        "team": "frontend"
                    }
                }
            }
        },
        "UpdateProjectResponse": {
            "type": "object",
            "properties": {
                "project_id": {
                    "description": "Unique identifier for the project",
                    "type": "string",
                    "example": "12345-abcde"
                },
                "updated_at": {
                    "description": "Timestamp when the project was last updated",
                    "type": "string",
                    "example": "2024-01-15T11:30:00Z"
                }
            }
        },
        "UpdateTaskRequest": {
            "type": "object",
            "required": [
                "taskID"
            ],
            "properties": {
                "error_message": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "output": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "status": {
                    "enum": [
                        "pending",
                        "in_progress",
                        "completed",
                        "failed",
                        "cancelled"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TaskStatus"
                        }
                    ]
                },
                "taskID": {
                    "type": "string",
                    "example": "task-12345-abcde"
                }
            }
        },
        "UpdateTaskResponse": {
            "type": "object",
            "properties": {
                "agent": {
                    "$ref": "#/definitions/models.Agent"
                },
                "agent_id": {
                    "description": "Which agent to use for this task",
                    "type": "string"
                },
                "codebase": {
                    "$ref": "#/definitions/models.Codebase"
                },
                "codebase_id": {
                    "description": "Optional: specific codebase, if nil uses all project codebases",
                    "type": "string"
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "description": "User's prompt/instructions",
                    "type": "string"
                },
                "error_message": {
                    "type": "string"
                },
                "execution_context": {
                    "description": "Enhanced execution context (populated when requested)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TaskExecutionContext"
                        }
                    ]
                },
                "input": {
                    "description": "Additional input parameters",
                    "type": "object",
                    "additionalProperties": {}
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "output": {
                    "description": "Task results",
                    "type": "object",
                    "additionalProperties": {}
                },
                "project": {
                    "description": "Relationship data (populated when requested)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Project"
                        }
                    ]
                },
                "project_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.TaskStatus"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "task_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.TaskType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.AIProvider": {
            "type": "string",
            "enum": [
                "bedrock",
                "local",
                "openai"
            ],
            "x-enum-varnames": [
                "AIProviderBedrock",
                "AIProviderLocal",
                "AIProviderOpenAI"
            ]
        },
        "models.APIUser": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/models.UserRole"
                },
                "status": {
                    "$ref": "#/definitions/models.UserStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.Agent": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "type": "string"
                },
                "ai_config": {
                    "description": "AI Configuration - this is per-agent, not global",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.AgentAIConfig"
                        }
                    ]
                },
                "capabilities": {
                    "description": "Agent capabilities and metadata",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "description": "Timestamps and metadata",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "knowledge_base_id": {
                    "description": "Knowledge base and vector store IDs (provider-specific)",
                    "type": "string"
                },
                "last_used_at": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.AgentStatus"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "vector_store_id": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.AgentAIConfig": {
            "type": "object",
            "properties": {
                "bedrock": {
                    "$ref": "#/definitions/models.BedrockAgentConfig"
                },
                "local": {
                    "description": "Provider-specific configurations",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.LocalAgentConfig"
                        }
                    ]
                },
                "openai": {
                    "$ref": "#/definitions/models.OpenAIAgentConfig"
                },
                "provider": {
                    "description": "bedrock, local, openai",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.AIProvider"
                        }
                    ]
                }
            }
        },
        "models.AgentStatus": {
            "type": "string",
            "enum": [
                "pending",
                "initializing",
                "ready",
                "failed"
            ],
            "x-enum-varnames": [
                "AgentStatusPending",
                "AgentStatusInitializing",
                "AgentStatusReady",
                "AgentStatusFailed"
            ]
        },
        "models.BedrockAgentConfig": {
            "type": "object",
            "properties": {
                "agent_service_role_arn": {
                    "type": "string"
                },
                "embedding_model": {
                    "type": "string"
                },
                "foundation_model": {
                    "type": "string"
                },
                "knowledge_base_service_role_arn": {
                    "type": "string"
                },
                "max_tokens": {
                    "type": "integer"
                },
                "region": {
                    "type": "string"
                },
                "s3_bucket_name": {
                    "type": "string"
                },
                "temperature": {
                    "type": "number"
                }
            }
        },
        "models.BitbucketConfig": {
            "type": "object",
            "properties": {
                "app_password": {
                    "description": "App password",
                    "type": "string"
                },
                "repository": {
                    "description": "Repository name",
                    "type": "string"
                },
                "username": {
                    "description": "Bitbucket username",
                    "type": "string"
                },
                "workspace": {
                    "description": "Bitbucket workspace",
                    "type": "string"
                }
            }
        },
        "models.Codebase": {
            "type": "object",
            "properties": {
                "codebase_id": {
                    "type": "string"
                },
                "config": {
                    "description": "Git provider configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.GitProviderConfig"
                        }
                    ]
                },
                "created_at": {
                    "type": "string"
                },
                "default_branch": {
                    "type": "string"
                },
                "last_sync_at": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/models.Provider"
                },
                "status": {
                    "description": "Status and metadata",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CodebaseStatus"
                        }
                    ]
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.CodebaseStatus": {
            "type": "string",
            "enum": [
                "active",
                "syncing",
                "sync_failed",
                "inactive"
            ],
            "x-enum-varnames": [
                "CodebaseStatusActive",
                "CodebaseStatusSyncing",
                "CodebaseStatusSyncFailed",
                "CodebaseStatusInactive"
            ]
        },
        "models.CodebaseSummary": {
            "type": "object",
            "properties": {
                "codebaseId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "defaultBranch": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/models.Provider"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.CreateCodebaseRequest": {
            "type": "object",
            "required": [
                "defaultBranch",
                "name",
                "projectId",
                "provider",
                "url"
            ],
            "properties": {
                "defaultBranch": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "projectId": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/models.Provider"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "url": {
                    "type": "string",
                    "maxLength": 2048
                }
            }
        },
        "models.CreateCodebaseResponse": {
            "type": "object",
            "properties": {
                "codebaseId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                }
            }
        },
        "models.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50
                },
                "role": {
                    "enum": [
                        "owner",
                        "admin",
                        "developer",
                        "viewer"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    ]
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "models.CreateUserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/models.APIUser"
                }
            }
        },
        "models.CustomGitConfig": {
            "type": "object",
            "properties": {
                "base_url": {
                    "description": "Git provider base URL",
                    "type": "string"
                },
                "headers": {
                    "description": "Custom headers",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "password": {
                    "description": "Password for basic auth",
                    "type": "string"
                },
                "ssh_key": {
                    "description": "SSH private key",
                    "type": "string"
                },
                "token": {
                    "description": "Authentication token",
                    "type": "string"
                },
                "username": {
                    "description": "Username for basic auth",
                    "type": "string"
                }
            }
        },
        "models.DeleteCodebaseResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.GetCodebaseResponse": {
            "type": "object",
            "properties": {
                "codebaseId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "defaultBranch": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/models.Provider"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.GetUserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/models.APIUser"
                }
            }
        },
        "models.GitAuthType": {
            "type": "string",
            "enum": [
                "token",
                "oauth",
                "ssh",
                "basic"
            ],
            "x-enum-varnames": [
                "GitAuthTypeToken",
                "GitAuthTypeOAuth",
                "GitAuthTypeSSH",
                "GitAuthTypeBasic"
            ]
        },
        "models.GitHubConfig": {
            "type": "object",
            "properties": {
                "organization": {
                    "description": "GitHub org (if applicable)",
                    "type": "string"
                },
                "owner": {
                    "description": "Repository owner",
                    "type": "string"
                },
                "repository": {
                    "description": "Repository name",
                    "type": "string"
                },
                "token": {
                    "description": "PAT or OAuth token",
                    "type": "string"
                }
            }
        },
        "models.GitLabConfig": {
            "type": "object",
            "properties": {
                "base_url": {
                    "description": "For self-hosted GitLab",
                    "type": "string"
                },
                "namespace": {
                    "description": "GitLab namespace",
                    "type": "string"
                },
                "project_id": {
                    "description": "GitLab project ID",
                    "type": "string"
                },
                "token": {
                    "description": "PAT or OAuth token",
                    "type": "string"
                }
            }
        },
        "models.GitProviderConfig": {
            "type": "object",
            "properties": {
                "auth_type": {
                    "description": "Authentication method",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.GitAuthType"
                        }
                    ]
                },
                "bitbucket": {
                    "description": "For Bitbucket",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.BitbucketConfig"
                        }
                    ]
                },
                "custom": {
                    "description": "For custom Git providers",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CustomGitConfig"
                        }
                    ]
                },
                "github": {
                    "description": "For GitHub",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.GitHubConfig"
                        }
                    ]
                },
                "gitlab": {
                    "description": "For GitLab",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.GitLabConfig"
                        }
                    ]
                }
            }
        },
        "models.ListCodebasesResponse": {
            "type": "object",
            "properties": {
                "codebases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CodebaseSummary"
                    }
                },
                "nextToken": {
                    "type": "string"
                }
            }
        },
        "models.ListUsersResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.APIUser"
                    }
                }
            }
        },
        "models.LocalAgentConfig": {
            "type": "object",
            "properties": {
                "chroma_url": {
                    "type": "string"
                },
                "embedding_model": {
                    "type": "string"
                },
                "max_tokens": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "ollama_url": {
                    "type": "string"
                },
                "temperature": {
                    "type": "number"
                }
            }
        },
        "models.OpenAIAgentConfig": {
            "type": "object",
            "properties": {
                "api_key_ref": {
                    "description": "Reference to secret, not the secret itself",
                    "type": "string"
                },
                "max_tokens": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "temperature": {
                    "type": "number"
                }
            }
        },
        "models.Project": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Project configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ProjectConfig"
                        }
                    ]
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.ProjectStatus"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.ProjectConfig": {
            "type": "object",
            "properties": {
                "default_ai_provider": {
                    "description": "Default AI provider preference for new agents (can be overridden per agent)",
                    "type": "string"
                },
                "default_branch": {
                    "description": "Default branch to use when no branch is specified",
                    "type": "string"
                }
            }
        },
        "models.ProjectStatus": {
            "type": "string",
            "enum": [
                "active",
                "archived",
                "deleted"
            ],
            "x-enum-varnames": [
                "ProjectStatusActive",
                "ProjectStatusArchived",
                "ProjectStatusDeleted"
            ]
        },
        "models.Provider": {
            "type": "string",
            "enum": [
                "github",
                "gitlab",
                "bitbucket",
                "custom"
            ],
            "x-enum-comments": {
                "ProviderBitbucket": "Bitbucket repository provider",
                "ProviderCustom": "Custom repository provider",
                "ProviderGitHub": "GitHub repository provider",
                "ProviderGitLab": "GitLab repository provider"
            },
            "x-enum-descriptions": [
                "GitHub repository provider",
                "GitLab repository provider",
                "Bitbucket repository provider",
                "Custom repository provider"
            ],
            "x-enum-varnames": [
                "ProviderGitHub",
                "ProviderGitLab",
                "ProviderBitbucket",
                "ProviderCustom"
            ]
        },
        "models.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "models.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                }
            }
        },
        "models.SignInRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.SignInResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.APIUser"
                }
            }
        },
        "models.SignOutRequest": {
            "type": "object",
            "required": [
                "access_token"
            ],
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        },
        "models.SignUpRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "models.SignUpResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.APIUser"
                }
            }
        },
        "models.Task": {
            "type": "object",
            "properties": {
                "agent": {
                    "$ref": "#/definitions/models.Agent"
                },
                "agent_id": {
                    "description": "Which agent to use for this task",
                    "type": "string"
                },
                "codebase": {
                    "$ref": "#/definitions/models.Codebase"
                },
                "codebase_id": {
                    "description": "Optional: specific codebase, if nil uses all project codebases",
                    "type": "string"
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "description": "User's prompt/instructions",
                    "type": "string"
                },
                "error_message": {
                    "type": "string"
                },
                "execution_context": {
                    "description": "Enhanced execution context (populated when requested)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TaskExecutionContext"
                        }
                    ]
                },
                "input": {
                    "description": "Additional input parameters",
                    "type": "object",
                    "additionalProperties": {}
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "output": {
                    "description": "Task results",
                    "type": "object",
                    "additionalProperties": {}
                },
                "project": {
                    "description": "Relationship data (populated when requested)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Project"
                        }
                    ]
                },
                "project_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.TaskStatus"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "task_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.TaskType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.TaskExecutionContext": {
            "type": "object",
            "properties": {
                "agent_version": {
                    "description": "Execution environment details",
                    "type": "string"
                },
                "ai_provider": {
                    "type": "string"
                },
                "execution_time_ms": {
                    "description": "Basic performance metrics",
                    "type": "integer"
                },
                "model_used": {
                    "type": "string"
                }
            }
        },
        "models.TaskStatus": {
            "type": "string",
            "enum": [
                "pending",
                "in_progress",
                "completed",
                "failed",
                "cancelled"
            ],
            "x-enum-varnames": [
                "TaskStatusPending",
                "TaskStatusInProgress",
                "TaskStatusCompleted",
                "TaskStatusFailed",
                "TaskStatusCancelled"
            ]
        },
        "models.TaskType": {
            "type": "string",
            "enum": [
                "code_analysis",
                "refactoring",
                "code_review",
                "documentation",
                "custom"
            ],
            "x-enum-varnames": [
                "TaskTypeCodeAnalysis",
                "TaskTypeRefactoring",
                "TaskTypeCodeReview",
                "TaskTypeDocumentation",
                "TaskTypeCustom"
            ]
        },
        "models.UpdateCodebaseRequest": {
            "type": "object",
            "required": [
                "codebaseId"
            ],
            "properties": {
                "codebaseId": {
                    "type": "string"
                },
                "defaultBranch": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "models.UpdateCodebaseResponse": {
            "type": "object",
            "properties": {
                "codebaseId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.UpdateUserRequest": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50
                },
                "role": {
                    "enum": [
                        "owner",
                        "admin",
                        "developer",
                        "viewer"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    ]
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.UpdateUserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/models.APIUser"
                }
            }
        },
        "models.UserRole": {
            "type": "string",
            "enum": [
                "owner",
                "admin",
                "developer",
                "viewer"
            ],
            "x-enum-comments": {
                "RoleAdmin": "Manage users, all projects",
                "RoleDeveloper": "Create/manage own projects",
                "RoleOwner": "Full access to everything",
                "RoleViewer": "Read-only access"
            },
            "x-enum-descriptions": [
                "Full access to everything",
                "Manage users, all projects",
                "Create/manage own projects",
                "Read-only access"
            ],
            "x-enum-varnames": [
                "RoleOwner",
                "RoleAdmin",
                "RoleDeveloper",
                "RoleViewer"
            ]
        },
        "models.UserStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "pending",
                "suspended"
            ],
            "x-enum-varnames": [
                "UserStatusActive",
                "UserStatusInactive",
                "UserStatusPending",
                "UserStatusSuspended"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Code Refactor Tool API",
	Description:      "API for creating and managing AI-powered code refactoring agents",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
