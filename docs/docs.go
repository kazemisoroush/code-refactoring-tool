// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/agent/create": {
            "post": {
                "description": "Create a new agent for code analysis with the specified repository",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Create a new agent",
                "parameters": [
                    {
                        "description": "Agent creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateAgentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Agent created successfully",
                        "schema": {
                            "$ref": "#/definitions/CreateAgentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agent/{id}": {
            "get": {
                "description": "Retrieve agent information by agent ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Get an agent by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent found",
                        "schema": {
                            "$ref": "#/definitions/CreateAgentResponse"
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an agent and its associated resources",
                "tags": [
                    "agents"
                ],
                "summary": "Delete an agent by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Agent deleted successfully"
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents": {
            "get": {
                "description": "Get a list of all agents",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "List all agents",
                "responses": {
                    "200": {
                        "description": "List of agents",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CreateAgentResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "CreateAgentRequest": {
            "type": "object",
            "required": [
                "repository_url"
            ],
            "properties": {
                "agent_name": {
                    "description": "Optional custom agent name",
                    "type": "string",
                    "example": "my-code-analyzer"
                },
                "branch": {
                    "description": "Optional branch name, defaults to main",
                    "type": "string",
                    "example": "main"
                },
                "repository_url": {
                    "description": "Repository URL to analyze",
                    "type": "string",
                    "example": "https://github.com/user/repo"
                }
            }
        },
        "CreateAgentResponse": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "description": "Unique identifier for the agent",
                    "type": "string",
                    "example": "agent-12345"
                },
                "agent_version": {
                    "description": "Agent version",
                    "type": "string",
                    "example": "v1.0.0"
                },
                "created_at": {
                    "description": "Timestamp when the agent was created",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "knowledge_base_id": {
                    "description": "Knowledge base ID associated with the agent",
                    "type": "string",
                    "example": "kb-67890"
                },
                "status": {
                    "description": "Agent creation status",
                    "type": "string",
                    "example": "created"
                },
                "vector_store_id": {
                    "description": "Vector store ID for the knowledge base",
                    "type": "string",
                    "example": "vs-abcde"
                }
            }
        },
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code",
                    "type": "integer",
                    "example": 400
                },
                "details": {
                    "description": "Optional error details",
                    "type": "string",
                    "example": "repository_url is required"
                },
                "message": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Invalid request parameters"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Code Refactor Tool API",
	Description:      "API for creating and managing AI-powered code refactoring agents",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
