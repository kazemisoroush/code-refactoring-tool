{
    "swagger": "2.0",
    "info": {
        "description": "API for creating and managing AI-powered code refactoring agents",
        "title": "Code Refactor Tool API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/agents": {
            "get": {
                "description": "Get a list of agents with optional pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "List all agents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token for pagination",
                        "name": "next_token",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "name": "max_results",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of agents",
                        "schema": {
                            "$ref": "#/definitions/ListAgentsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new agent for code analysis with the specified repository",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Create a new agent",
                "parameters": [
                    {
                        "description": "Agent creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateAgentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Agent created successfully",
                        "schema": {
                            "$ref": "#/definitions/CreateAgentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/agents/{id}": {
            "get": {
                "description": "Retrieve agent information by agent ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Get an agent by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent found",
                        "schema": {
                            "$ref": "#/definitions/GetAgentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid agent ID",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an agent and its associated resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Delete an agent by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/DeleteAgentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid agent ID",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/codebases": {
            "get": {
                "description": "Retrieve a list of codebases with optional pagination and filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "codebases"
                ],
                "summary": "List codebases",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by project ID",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tag filter in format key:value",
                        "name": "tag_filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token for pagination",
                        "name": "next_token",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "name": "max_results",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Codebases retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ListCodebasesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/codebases/{id}": {
            "get": {
                "description": "Retrieve a codebase by its unique identifier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "codebases"
                ],
                "summary": "Get a codebase by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Codebase ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Codebase retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GetCodebaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid codebase ID",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Codebase not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing codebase's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "codebases"
                ],
                "summary": "Update a codebase",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Codebase ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Codebase update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateCodebaseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Codebase updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateCodebaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Codebase not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a codebase by its unique identifier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "codebases"
                ],
                "summary": "Delete a codebase",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Codebase ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Codebase deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.DeleteCodebaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid codebase ID",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Codebase not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns the health status of the service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/projects": {
            "get": {
                "description": "Retrieve a list of projects with optional pagination and filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "List projects",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token for pagination",
                        "name": "next_token",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "name": "max_results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tag filter in format key:value",
                        "name": "tag_filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Projects retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/ListProjectsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new project for organizing codebases and agents",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Create a new project",
                "parameters": [
                    {
                        "description": "Project creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Project created successfully",
                        "schema": {
                            "$ref": "#/definitions/CreateProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{id}": {
            "get": {
                "description": "Retrieve a project by its unique identifier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get a project by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/GetProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing project's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Update a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Project update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project updated successfully",
                        "schema": {
                            "$ref": "#/definitions/UpdateProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a project by its unique identifier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Delete a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/DeleteProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid project ID",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{project_id}/codebases": {
            "post": {
                "description": "Create a new codebase attached to a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "codebases"
                ],
                "summary": "Create a new codebase",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Codebase creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateCodebaseRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Codebase created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.CreateCodebaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "AgentSummary": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "description": "Unique identifier for the agent",
                    "type": "string",
                    "example": "agent-12345"
                },
                "agent_name": {
                    "description": "Agent name",
                    "type": "string",
                    "example": "my-code-analyzer"
                },
                "created_at": {
                    "description": "Timestamp when the agent was created",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "repository_url": {
                    "description": "Repository URL",
                    "type": "string",
                    "example": "https://github.com/user/repo"
                },
                "status": {
                    "description": "Agent status",
                    "type": "string",
                    "example": "ready"
                }
            }
        },
        "CreateAgentRequest": {
            "type": "object",
            "required": [
                "repository_url"
            ],
            "properties": {
                "agent_name": {
                    "description": "Optional custom agent name",
                    "type": "string",
                    "minLength": 1,
                    "example": "my-code-analyzer"
                },
                "branch": {
                    "description": "Optional branch name, defaults to main",
                    "type": "string",
                    "minLength": 1,
                    "example": "main"
                },
                "repository_url": {
                    "description": "Repository URL to analyze",
                    "type": "string",
                    "example": "https://github.com/user/repo"
                }
            }
        },
        "CreateAgentResponse": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "description": "Unique identifier for the agent",
                    "type": "string",
                    "example": "agent-12345"
                },
                "agent_version": {
                    "description": "Agent version",
                    "type": "string",
                    "example": "v1.0.0"
                },
                "created_at": {
                    "description": "Timestamp when the agent was created",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "knowledge_base_id": {
                    "description": "Knowledge base ID associated with the agent",
                    "type": "string",
                    "example": "kb-67890"
                },
                "status": {
                    "description": "Agent creation status",
                    "type": "string",
                    "example": "created"
                },
                "vector_store_id": {
                    "description": "Vector store ID for the knowledge base",
                    "type": "string",
                    "example": "vs-abcde"
                }
            }
        },
        "CreateProjectRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Optional project summary",
                    "type": "string",
                    "maxLength": 500,
                    "example": "A sample project for code analysis"
                },
                "language": {
                    "description": "Optional programming language",
                    "type": "string",
                    "enum": [
                        "go",
                        "javascript",
                        "typescript",
                        "python",
                        "java",
                        "csharp",
                        "rust",
                        "cpp",
                        "c",
                        "ruby",
                        "php",
                        "kotlin",
                        "swift",
                        "scala",
                        "other"
                    ],
                    "example": "go"
                },
                "name": {
                    "description": "Human-readable project name",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "my-project"
                },
                "tags": {
                    "description": "Optional user-defined key-value tags",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "env": "prod",
                        "team": "backend"
                    }
                }
            }
        },
        "CreateProjectResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the project was created",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "project_id": {
                    "description": "Unique identifier for the project",
                    "type": "string",
                    "example": "proj-12345-abcde"
                }
            }
        },
        "DeleteAgentResponse": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "description": "Agent ID that was deleted",
                    "type": "string",
                    "example": "agent-12345"
                },
                "success": {
                    "description": "Success indicator",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "DeleteProjectResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "description": "Indicates whether the deletion was successful",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code",
                    "type": "integer",
                    "example": 400
                },
                "details": {
                    "description": "Optional error details",
                    "type": "string",
                    "example": "repository_url is required"
                },
                "message": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Invalid request parameters"
                }
            }
        },
        "GetAgentResponse": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "description": "Unique identifier for the agent",
                    "type": "string",
                    "example": "agent-12345"
                },
                "agent_name": {
                    "description": "Agent name",
                    "type": "string",
                    "example": "my-code-analyzer"
                },
                "agent_version": {
                    "description": "Agent version",
                    "type": "string",
                    "example": "v1.0.0"
                },
                "branch": {
                    "description": "Branch name",
                    "type": "string",
                    "example": "main"
                },
                "created_at": {
                    "description": "Timestamp when the agent was created",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "knowledge_base_id": {
                    "description": "Knowledge base ID associated with the agent",
                    "type": "string",
                    "example": "kb-67890"
                },
                "repository_url": {
                    "description": "Repository URL",
                    "type": "string",
                    "example": "https://github.com/user/repo"
                },
                "status": {
                    "description": "Agent status",
                    "type": "string",
                    "example": "ready"
                },
                "updated_at": {
                    "description": "Timestamp when the agent was last updated",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "vector_store_id": {
                    "description": "Vector store ID for the knowledge base",
                    "type": "string",
                    "example": "vs-abcde"
                }
            }
        },
        "GetProjectResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the project was created",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "description": {
                    "description": "Optional project summary",
                    "type": "string",
                    "example": "A sample project for code analysis"
                },
                "language": {
                    "description": "Optional programming language",
                    "type": "string",
                    "example": "go"
                },
                "metadata": {
                    "description": "Optional metadata",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "version": "1.0.0"
                    }
                },
                "name": {
                    "description": "Human-readable project name",
                    "type": "string",
                    "example": "my-project"
                },
                "project_id": {
                    "description": "Unique identifier for the project",
                    "type": "string",
                    "example": "proj-12345-abcde"
                },
                "tags": {
                    "description": "Optional user-defined key-value tags",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "env": "prod",
                        "team": "backend"
                    }
                },
                "updated_at": {
                    "description": "Timestamp when the project was last updated",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                }
            }
        },
        "ListAgentsResponse": {
            "type": "object",
            "properties": {
                "agents": {
                    "description": "List of agent summaries",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgentSummary"
                    }
                },
                "next_token": {
                    "description": "Token for next page",
                    "type": "string",
                    "example": "eyJ0aW1lc3RhbXAiOiIyMDI0LTAxLTE1VDEwOjMwOjAwWiJ9"
                }
            }
        },
        "ListProjectsResponse": {
            "type": "object",
            "properties": {
                "next_token": {
                    "description": "Token for next page of results",
                    "type": "string",
                    "example": "eyJpZCI6InByb2otNjc4OTAifQ=="
                },
                "projects": {
                    "description": "List of project summaries",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProjectSummary"
                    }
                }
            }
        },
        "ProjectSummary": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the project was created",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "name": {
                    "description": "Human-readable project name",
                    "type": "string",
                    "example": "my-project"
                },
                "project_id": {
                    "description": "Unique identifier for the project",
                    "type": "string",
                    "example": "proj-12345-abcde"
                },
                "tags": {
                    "description": "Optional user-defined key-value tags",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "env": "prod",
                        "team": "backend"
                    }
                }
            }
        },
        "UpdateProjectRequest": {
            "type": "object",
            "required": [
                "projectID"
            ],
            "properties": {
                "description": {
                    "description": "Optional project summary",
                    "type": "string",
                    "maxLength": 500,
                    "example": "Updated project description"
                },
                "language": {
                    "description": "Optional programming language",
                    "type": "string",
                    "enum": [
                        "go",
                        "javascript",
                        "typescript",
                        "python",
                        "java",
                        "csharp",
                        "rust",
                        "cpp",
                        "c",
                        "ruby",
                        "php",
                        "kotlin",
                        "swift",
                        "scala",
                        "other"
                    ],
                    "example": "python"
                },
                "metadata": {
                    "description": "Optional metadata",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "version": "1.1.0"
                    }
                },
                "name": {
                    "description": "Optional human-readable project name",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "updated-project"
                },
                "projectID": {
                    "description": "Unique identifier for the project",
                    "type": "string",
                    "example": "proj-12345-abcde"
                },
                "tags": {
                    "description": "Optional user-defined key-value tags",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "env": "staging",
                        "team": "frontend"
                    }
                }
            }
        },
        "UpdateProjectResponse": {
            "type": "object",
            "properties": {
                "project_id": {
                    "description": "Unique identifier for the project",
                    "type": "string",
                    "example": "proj-12345-abcde"
                },
                "updated_at": {
                    "description": "Timestamp when the project was last updated",
                    "type": "string",
                    "example": "2024-01-15T11:30:00Z"
                }
            }
        },
        "models.CodebaseSummary": {
            "type": "object",
            "properties": {
                "codebaseId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "defaultBranch": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/models.Provider"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.CreateCodebaseRequest": {
            "type": "object",
            "required": [
                "defaultBranch",
                "name",
                "projectId",
                "provider",
                "url"
            ],
            "properties": {
                "defaultBranch": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "projectId": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/models.Provider"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "url": {
                    "type": "string",
                    "maxLength": 2048
                }
            }
        },
        "models.CreateCodebaseResponse": {
            "type": "object",
            "properties": {
                "codebaseId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                }
            }
        },
        "models.DeleteCodebaseResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.GetCodebaseResponse": {
            "type": "object",
            "properties": {
                "codebaseId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "defaultBranch": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/models.Provider"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.ListCodebasesResponse": {
            "type": "object",
            "properties": {
                "codebases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CodebaseSummary"
                    }
                },
                "nextToken": {
                    "type": "string"
                }
            }
        },
        "models.Provider": {
            "type": "string",
            "enum": [
                "github",
                "gitlab",
                "bitbucket",
                "custom"
            ],
            "x-enum-comments": {
                "ProviderBitbucket": "Bitbucket repository provider",
                "ProviderCustom": "Custom repository provider",
                "ProviderGitHub": "GitHub repository provider",
                "ProviderGitLab": "GitLab repository provider"
            },
            "x-enum-descriptions": [
                "GitHub repository provider",
                "GitLab repository provider",
                "Bitbucket repository provider",
                "Custom repository provider"
            ],
            "x-enum-varnames": [
                "ProviderGitHub",
                "ProviderGitLab",
                "ProviderBitbucket",
                "ProviderCustom"
            ]
        },
        "models.UpdateCodebaseRequest": {
            "type": "object",
            "required": [
                "codebaseId"
            ],
            "properties": {
                "codebaseId": {
                    "type": "string"
                },
                "defaultBranch": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "models.UpdateCodebaseResponse": {
            "type": "object",
            "properties": {
                "codebaseId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    }
}