basePath: /api/v1
definitions:
  AgentSummary:
    properties:
      agent_id:
        description: Unique identifier for the agent
        example: agent-12345
        type: string
      agent_name:
        description: Agent name
        example: my-code-analyzer
        type: string
      created_at:
        description: Timestamp when the agent was created
        example: "2024-01-15T10:30:00Z"
        type: string
      repository_url:
        description: Repository URL
        example: https://github.com/user/repo
        type: string
      status:
        description: Agent status
        example: ready
        type: string
    type: object
  CreateAgentRequest:
    properties:
      agent_name:
        description: Optional custom agent name
        example: my-code-analyzer
        minLength: 1
        type: string
      branch:
        description: Optional branch name, defaults to main
        example: main
        minLength: 1
        type: string
      repository_url:
        description: Repository URL to analyze
        example: https://github.com/user/repo
        type: string
    required:
    - repository_url
    type: object
  CreateAgentResponse:
    properties:
      agent_id:
        description: Unique identifier for the agent
        example: agent-12345
        type: string
      agent_version:
        description: Agent version
        example: v1.0.0
        type: string
      created_at:
        description: Timestamp when the agent was created
        example: "2024-01-15T10:30:00Z"
        type: string
      knowledge_base_id:
        description: Knowledge base ID associated with the agent
        example: kb-67890
        type: string
      status:
        description: Agent creation status
        example: created
        type: string
      vector_store_id:
        description: Vector store ID for the knowledge base
        example: vs-abcde
        type: string
    type: object
  CreateProjectRequest:
    properties:
      description:
        description: Optional project summary
        example: A sample project for code analysis
        maxLength: 500
        type: string
      language:
        description: Optional programming language
        enum:
        - go
        - javascript
        - typescript
        - python
        - java
        - csharp
        - rust
        - cpp
        - c
        - ruby
        - php
        - kotlin
        - swift
        - scala
        - other
        example: go
        type: string
      name:
        description: Human-readable project name
        example: my-project
        maxLength: 100
        minLength: 1
        type: string
      tags:
        additionalProperties:
          type: string
        description: Optional user-defined key-value tags
        example:
          env: prod
          team: backend
        type: object
    required:
    - name
    type: object
  CreateProjectResponse:
    properties:
      created_at:
        description: Timestamp when the project was created
        example: "2024-01-15T10:30:00Z"
        type: string
      project_id:
        description: Unique identifier for the project
        example: 12345-abcde
        type: string
    type: object
  CreateTaskRequest:
    type: object
  CreateTaskResponse:
    properties:
      created_at:
        example: "2024-01-15T10:30:00Z"
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.TaskStatus'
        example: pending
      task_id:
        example: task-12345-abcde
        type: string
    type: object
  DeleteAgentResponse:
    properties:
      agent_id:
        description: Agent ID that was deleted
        example: agent-12345
        type: string
      success:
        description: Success indicator
        example: true
        type: boolean
    type: object
  DeleteProjectResponse:
    properties:
      success:
        description: Indicates whether the deletion was successful
        example: true
        type: boolean
    type: object
  ErrorResponse:
    properties:
      code:
        description: Error code
        example: 400
        type: integer
      details:
        description: Optional error details
        example: repository_url is required
        type: string
      message:
        description: Error message
        example: Invalid request parameters
        type: string
    type: object
  ExecuteTaskRequest:
    type: object
  ExecuteTaskResponse:
    properties:
      completed_at:
        example: "2024-01-15T10:35:00Z"
        type: string
      created_at:
        example: "2024-01-15T10:30:00Z"
        type: string
      output:
        additionalProperties: {}
        type: object
      status:
        allOf:
        - $ref: '#/definitions/models.TaskStatus'
        example: completed
      task_id:
        example: task-12345-abcde
        type: string
    type: object
  GetAgentResponse:
    properties:
      agent_id:
        description: Unique identifier for the agent
        example: agent-12345
        type: string
      agent_name:
        description: Agent name
        example: my-code-analyzer
        type: string
      agent_version:
        description: Agent version
        example: v1.0.0
        type: string
      branch:
        description: Branch name
        example: main
        type: string
      created_at:
        description: Timestamp when the agent was created
        example: "2024-01-15T10:30:00Z"
        type: string
      knowledge_base_id:
        description: Knowledge base ID associated with the agent
        example: kb-67890
        type: string
      repository_url:
        description: Repository URL
        example: https://github.com/user/repo
        type: string
      status:
        description: Agent status
        example: ready
        type: string
      updated_at:
        description: Timestamp when the agent was last updated
        example: "2024-01-15T10:30:00Z"
        type: string
      vector_store_id:
        description: Vector store ID for the knowledge base
        example: vs-abcde
        type: string
    type: object
  GetProjectResponse:
    properties:
      created_at:
        description: Timestamp when the project was created
        example: "2024-01-15T10:30:00Z"
        type: string
      description:
        description: Optional project summary
        example: A sample project for code analysis
        type: string
      language:
        description: Optional programming language
        example: go
        type: string
      metadata:
        additionalProperties:
          type: string
        description: Optional metadata
        example:
          version: 1.0.0
        type: object
      name:
        description: Human-readable project name
        example: my-project
        type: string
      project_id:
        description: Unique identifier for the project
        example: 12345-abcde
        type: string
      tags:
        additionalProperties:
          type: string
        description: Optional user-defined key-value tags
        example:
          env: prod
          team: backend
        type: object
      updated_at:
        description: Timestamp when the project was last updated
        example: "2024-01-15T10:30:00Z"
        type: string
    type: object
  GetTaskResponse:
    properties:
      agent:
        $ref: '#/definitions/models.Agent'
      agent_id:
        description: Which agent to use for this task
        type: string
      codebase:
        $ref: '#/definitions/models.Codebase'
      codebase_id:
        description: 'Optional: specific codebase, if nil uses all project codebases'
        type: string
      completed_at:
        type: string
      created_at:
        type: string
      description:
        description: User's prompt/instructions
        type: string
      error_message:
        type: string
      execution_context:
        allOf:
        - $ref: '#/definitions/models.TaskExecutionContext'
        description: Enhanced execution context (populated when requested)
      input:
        additionalProperties: {}
        description: Additional input parameters
        type: object
      metadata:
        additionalProperties:
          type: string
        type: object
      output:
        additionalProperties: {}
        description: Task results
        type: object
      project:
        allOf:
        - $ref: '#/definitions/models.Project'
        description: Relationship data (populated when requested)
      project_id:
        type: string
      status:
        $ref: '#/definitions/models.TaskStatus'
      tags:
        additionalProperties:
          type: string
        type: object
      task_id:
        type: string
      title:
        type: string
      type:
        $ref: '#/definitions/models.TaskType'
      updated_at:
        type: string
    type: object
  HealthCheckResponse:
    properties:
      service:
        description: Service name
        example: code-refactor-tool-api
        type: string
      status:
        description: Service status
        example: healthy
        type: string
      timestamp:
        description: Current timestamp
        example: "2024-01-15T10:30:00Z"
        type: string
      uptime:
        description: Uptime in seconds (optional)
        example: 3600
        type: integer
      version:
        description: Service version
        example: 1.0.0
        type: string
    type: object
  ListAgentsResponse:
    properties:
      agents:
        description: List of agent summaries
        items:
          $ref: '#/definitions/AgentSummary'
        type: array
      next_token:
        description: Token for next page
        example: eyJ0aW1lc3RhbXAiOiIyMDI0LTAxLTE1VDEwOjMwOjAwWiJ9
        type: string
    type: object
  ListProjectsResponse:
    properties:
      next_token:
        description: Token for next page of results
        example: eyJpZCI6InByb2otNjc4OTAifQ==
        type: string
      projects:
        description: List of project summaries
        items:
          $ref: '#/definitions/ProjectSummary'
        type: array
    type: object
  ListTasksResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      tasks:
        items:
          $ref: '#/definitions/models.Task'
        type: array
      total_count:
        type: integer
    type: object
  ProjectSummary:
    properties:
      created_at:
        description: Timestamp when the project was created
        example: "2024-01-15T10:30:00Z"
        type: string
      name:
        description: Human-readable project name
        example: my-project
        type: string
      project_id:
        description: Unique identifier for the project
        example: 12345-abcde
        type: string
      tags:
        additionalProperties:
          type: string
        description: Optional user-defined key-value tags
        example:
          env: prod
          team: backend
        type: object
    type: object
  SuccessResponse:
    properties:
      message:
        description: Success message
        example: Operation completed successfully
        type: string
    type: object
  UpdateAgentRequest:
    properties:
      agent_name:
        description: Optional new agent name
        example: updated-code-analyzer
        minLength: 1
        type: string
      branch:
        description: Optional updated branch name
        example: develop
        minLength: 1
        type: string
      repository_url:
        description: Optional updated repository URL
        example: https://github.com/user/updated-repo
        type: string
    type: object
  UpdateAgentResponse:
    properties:
      agent_id:
        description: Unique identifier for the agent
        example: agent-12345
        type: string
      agent_name:
        description: Agent name
        example: updated-code-analyzer
        type: string
      agent_version:
        description: Agent version
        example: v1.1.0
        type: string
      branch:
        description: Branch name
        example: develop
        type: string
      created_at:
        description: Timestamp when the agent was created
        example: "2024-01-15T10:30:00Z"
        type: string
      knowledge_base_id:
        description: Knowledge base ID associated with the agent
        example: kb-67890
        type: string
      repository_url:
        description: Repository URL
        example: https://github.com/user/updated-repo
        type: string
      status:
        description: Agent status
        example: ready
        type: string
      updated_at:
        description: Timestamp when the agent was last updated
        example: "2024-01-15T11:45:00Z"
        type: string
      vector_store_id:
        description: Vector store ID for the knowledge base
        example: vs-abcde
        type: string
    type: object
  UpdateProjectRequest:
    properties:
      description:
        description: Optional project summary
        example: Updated project description
        maxLength: 500
        type: string
      language:
        description: Optional programming language
        enum:
        - go
        - javascript
        - typescript
        - python
        - java
        - csharp
        - rust
        - cpp
        - c
        - ruby
        - php
        - kotlin
        - swift
        - scala
        - other
        example: python
        type: string
      metadata:
        additionalProperties:
          type: string
        description: Optional metadata
        example:
          version: 1.1.0
        type: object
      name:
        description: Optional human-readable project name
        example: updated-project
        maxLength: 100
        minLength: 1
        type: string
      projectID:
        description: Unique identifier for the project
        example: 12345-abcde
        type: string
      tags:
        additionalProperties:
          type: string
        description: Optional user-defined key-value tags
        example:
          env: staging
          team: frontend
        type: object
    required:
    - projectID
    type: object
  UpdateProjectResponse:
    properties:
      project_id:
        description: Unique identifier for the project
        example: 12345-abcde
        type: string
      updated_at:
        description: Timestamp when the project was last updated
        example: "2024-01-15T11:30:00Z"
        type: string
    type: object
  UpdateTaskRequest:
    properties:
      error_message:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      output:
        additionalProperties: {}
        type: object
      status:
        allOf:
        - $ref: '#/definitions/models.TaskStatus'
        enum:
        - pending
        - in_progress
        - completed
        - failed
        - cancelled
      taskID:
        example: task-12345-abcde
        type: string
    required:
    - taskID
    type: object
  UpdateTaskResponse:
    properties:
      agent:
        $ref: '#/definitions/models.Agent'
      agent_id:
        description: Which agent to use for this task
        type: string
      codebase:
        $ref: '#/definitions/models.Codebase'
      codebase_id:
        description: 'Optional: specific codebase, if nil uses all project codebases'
        type: string
      completed_at:
        type: string
      created_at:
        type: string
      description:
        description: User's prompt/instructions
        type: string
      error_message:
        type: string
      execution_context:
        allOf:
        - $ref: '#/definitions/models.TaskExecutionContext'
        description: Enhanced execution context (populated when requested)
      input:
        additionalProperties: {}
        description: Additional input parameters
        type: object
      metadata:
        additionalProperties:
          type: string
        type: object
      output:
        additionalProperties: {}
        description: Task results
        type: object
      project:
        allOf:
        - $ref: '#/definitions/models.Project'
        description: Relationship data (populated when requested)
      project_id:
        type: string
      status:
        $ref: '#/definitions/models.TaskStatus'
      tags:
        additionalProperties:
          type: string
        type: object
      task_id:
        type: string
      title:
        type: string
      type:
        $ref: '#/definitions/models.TaskType'
      updated_at:
        type: string
    type: object
  models.AIProvider:
    enum:
    - bedrock
    - local
    - openai
    type: string
    x-enum-varnames:
    - AIProviderBedrock
    - AIProviderLocal
    - AIProviderOpenAI
  models.APIUser:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      role:
        $ref: '#/definitions/models.UserRole'
      status:
        $ref: '#/definitions/models.UserStatus'
      updated_at:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  models.Agent:
    properties:
      agent_id:
        type: string
      ai_config:
        allOf:
        - $ref: '#/definitions/models.AgentAIConfig'
        description: AI Configuration - this is per-agent, not global
      capabilities:
        description: Agent capabilities and metadata
        items:
          type: string
        type: array
      created_at:
        description: Timestamps and metadata
        type: string
      description:
        type: string
      knowledge_base_id:
        description: Knowledge base and vector store IDs (provider-specific)
        type: string
      last_used_at:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      project_id:
        type: string
      status:
        $ref: '#/definitions/models.AgentStatus'
      tags:
        additionalProperties:
          type: string
        type: object
      updated_at:
        type: string
      vector_store_id:
        type: string
      version:
        type: string
    type: object
  models.AgentAIConfig:
    properties:
      bedrock:
        $ref: '#/definitions/models.BedrockAgentConfig'
      local:
        allOf:
        - $ref: '#/definitions/models.LocalAgentConfig'
        description: Provider-specific configurations
      openai:
        $ref: '#/definitions/models.OpenAIAgentConfig'
      provider:
        allOf:
        - $ref: '#/definitions/models.AIProvider'
        description: bedrock, local, openai
    type: object
  models.AgentStatus:
    enum:
    - pending
    - initializing
    - ready
    - failed
    type: string
    x-enum-varnames:
    - AgentStatusPending
    - AgentStatusInitializing
    - AgentStatusReady
    - AgentStatusFailed
  models.BedrockAgentConfig:
    properties:
      agent_service_role_arn:
        type: string
      embedding_model:
        type: string
      foundation_model:
        type: string
      knowledge_base_service_role_arn:
        type: string
      max_tokens:
        type: integer
      region:
        type: string
      s3_bucket_name:
        type: string
      temperature:
        type: number
    type: object
  models.BitbucketConfig:
    properties:
      app_password:
        description: App password
        type: string
      repository:
        description: Repository name
        type: string
      username:
        description: Bitbucket username
        type: string
      workspace:
        description: Bitbucket workspace
        type: string
    type: object
  models.Codebase:
    properties:
      codebase_id:
        type: string
      config:
        allOf:
        - $ref: '#/definitions/models.GitProviderConfig'
        description: Git provider configuration
      created_at:
        type: string
      default_branch:
        type: string
      last_sync_at:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      project_id:
        type: string
      provider:
        $ref: '#/definitions/models.Provider'
      status:
        allOf:
        - $ref: '#/definitions/models.CodebaseStatus'
        description: Status and metadata
      tags:
        additionalProperties:
          type: string
        type: object
      updated_at:
        type: string
      url:
        type: string
    type: object
  models.CodebaseStatus:
    enum:
    - active
    - syncing
    - sync_failed
    - inactive
    type: string
    x-enum-varnames:
    - CodebaseStatusActive
    - CodebaseStatusSyncing
    - CodebaseStatusSyncFailed
    - CodebaseStatusInactive
  models.CodebaseSummary:
    properties:
      codebaseId:
        type: string
      createdAt:
        type: string
      defaultBranch:
        type: string
      name:
        type: string
      projectId:
        type: string
      provider:
        $ref: '#/definitions/models.Provider'
      tags:
        additionalProperties:
          type: string
        type: object
      url:
        type: string
    type: object
  models.CreateCodebaseRequest:
    properties:
      defaultBranch:
        maxLength: 255
        minLength: 1
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
      projectId:
        type: string
      provider:
        $ref: '#/definitions/models.Provider'
      tags:
        additionalProperties:
          type: string
        type: object
      url:
        maxLength: 2048
        type: string
    required:
    - defaultBranch
    - name
    - projectId
    - provider
    - url
    type: object
  models.CreateCodebaseResponse:
    properties:
      codebaseId:
        type: string
      createdAt:
        type: string
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      first_name:
        maxLength: 50
        type: string
      last_name:
        maxLength: 50
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.UserRole'
        enum:
        - owner
        - admin
        - developer
        - viewer
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - username
    type: object
  models.CreateUserResponse:
    properties:
      user:
        $ref: '#/definitions/models.APIUser'
    type: object
  models.CustomGitConfig:
    properties:
      base_url:
        description: Git provider base URL
        type: string
      headers:
        additionalProperties:
          type: string
        description: Custom headers
        type: object
      password:
        description: Password for basic auth
        type: string
      ssh_key:
        description: SSH private key
        type: string
      token:
        description: Authentication token
        type: string
      username:
        description: Username for basic auth
        type: string
    type: object
  models.DeleteCodebaseResponse:
    properties:
      success:
        type: boolean
    type: object
  models.GetCodebaseResponse:
    properties:
      codebaseId:
        type: string
      createdAt:
        type: string
      defaultBranch:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      projectId:
        type: string
      provider:
        $ref: '#/definitions/models.Provider'
      tags:
        additionalProperties:
          type: string
        type: object
      updatedAt:
        type: string
      url:
        type: string
    type: object
  models.GetUserResponse:
    properties:
      user:
        $ref: '#/definitions/models.APIUser'
    type: object
  models.GitAuthType:
    enum:
    - token
    - oauth
    - ssh
    - basic
    type: string
    x-enum-varnames:
    - GitAuthTypeToken
    - GitAuthTypeOAuth
    - GitAuthTypeSSH
    - GitAuthTypeBasic
  models.GitHubConfig:
    properties:
      organization:
        description: GitHub org (if applicable)
        type: string
      owner:
        description: Repository owner
        type: string
      repository:
        description: Repository name
        type: string
      token:
        description: PAT or OAuth token
        type: string
    type: object
  models.GitLabConfig:
    properties:
      base_url:
        description: For self-hosted GitLab
        type: string
      namespace:
        description: GitLab namespace
        type: string
      project_id:
        description: GitLab project ID
        type: string
      token:
        description: PAT or OAuth token
        type: string
    type: object
  models.GitProviderConfig:
    properties:
      auth_type:
        allOf:
        - $ref: '#/definitions/models.GitAuthType'
        description: Authentication method
      bitbucket:
        allOf:
        - $ref: '#/definitions/models.BitbucketConfig'
        description: For Bitbucket
      custom:
        allOf:
        - $ref: '#/definitions/models.CustomGitConfig'
        description: For custom Git providers
      github:
        allOf:
        - $ref: '#/definitions/models.GitHubConfig'
        description: For GitHub
      gitlab:
        allOf:
        - $ref: '#/definitions/models.GitLabConfig'
        description: For GitLab
    type: object
  models.ListCodebasesResponse:
    properties:
      codebases:
        items:
          $ref: '#/definitions/models.CodebaseSummary'
        type: array
      nextToken:
        type: string
    type: object
  models.ListUsersResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.APIUser'
        type: array
    type: object
  models.LocalAgentConfig:
    properties:
      chroma_url:
        type: string
      embedding_model:
        type: string
      max_tokens:
        type: integer
      model:
        type: string
      ollama_url:
        type: string
      temperature:
        type: number
    type: object
  models.OpenAIAgentConfig:
    properties:
      api_key:
        type: string
      max_tokens:
        type: integer
      model:
        type: string
      temperature:
        type: number
    type: object
  models.Project:
    properties:
      config:
        allOf:
        - $ref: '#/definitions/models.ProjectConfig'
        description: Project configuration
      created_at:
        type: string
      description:
        type: string
      language:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      project_id:
        type: string
      status:
        $ref: '#/definitions/models.ProjectStatus'
      tags:
        additionalProperties:
          type: string
        type: object
      updated_at:
        type: string
    type: object
  models.ProjectConfig:
    properties:
      default_ai_provider:
        description: Default AI provider preference for new agents (can be overridden
          per agent)
        type: string
      default_branch:
        description: Default branch to use when no branch is specified
        type: string
    type: object
  models.ProjectStatus:
    enum:
    - active
    - archived
    - deleted
    type: string
    x-enum-varnames:
    - ProjectStatusActive
    - ProjectStatusArchived
    - ProjectStatusDeleted
  models.Provider:
    enum:
    - github
    - gitlab
    - bitbucket
    - custom
    type: string
    x-enum-comments:
      ProviderBitbucket: Bitbucket repository provider
      ProviderCustom: Custom repository provider
      ProviderGitHub: GitHub repository provider
      ProviderGitLab: GitLab repository provider
    x-enum-descriptions:
    - GitHub repository provider
    - GitLab repository provider
    - Bitbucket repository provider
    - Custom repository provider
    x-enum-varnames:
    - ProviderGitHub
    - ProviderGitLab
    - ProviderBitbucket
    - ProviderCustom
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  models.SignInRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.SignInResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
      user:
        $ref: '#/definitions/models.APIUser'
    type: object
  models.SignOutRequest:
    properties:
      access_token:
        type: string
    required:
    - access_token
    type: object
  models.SignUpRequest:
    properties:
      email:
        type: string
      first_name:
        maxLength: 50
        type: string
      last_name:
        maxLength: 50
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.SignUpResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
      user:
        $ref: '#/definitions/models.APIUser'
    type: object
  models.Task:
    properties:
      agent:
        $ref: '#/definitions/models.Agent'
      agent_id:
        description: Which agent to use for this task
        type: string
      codebase:
        $ref: '#/definitions/models.Codebase'
      codebase_id:
        description: 'Optional: specific codebase, if nil uses all project codebases'
        type: string
      completed_at:
        type: string
      created_at:
        type: string
      description:
        description: User's prompt/instructions
        type: string
      error_message:
        type: string
      execution_context:
        allOf:
        - $ref: '#/definitions/models.TaskExecutionContext'
        description: Enhanced execution context (populated when requested)
      input:
        additionalProperties: {}
        description: Additional input parameters
        type: object
      metadata:
        additionalProperties:
          type: string
        type: object
      output:
        additionalProperties: {}
        description: Task results
        type: object
      project:
        allOf:
        - $ref: '#/definitions/models.Project'
        description: Relationship data (populated when requested)
      project_id:
        type: string
      status:
        $ref: '#/definitions/models.TaskStatus'
      tags:
        additionalProperties:
          type: string
        type: object
      task_id:
        type: string
      title:
        type: string
      type:
        $ref: '#/definitions/models.TaskType'
      updated_at:
        type: string
    type: object
  models.TaskExecutionContext:
    properties:
      agent_version:
        description: Execution environment details
        type: string
      ai_provider:
        type: string
      execution_time_ms:
        description: Basic performance metrics
        type: integer
      model_used:
        type: string
    type: object
  models.TaskStatus:
    enum:
    - pending
    - in_progress
    - completed
    - failed
    - cancelled
    type: string
    x-enum-varnames:
    - TaskStatusPending
    - TaskStatusInProgress
    - TaskStatusCompleted
    - TaskStatusFailed
    - TaskStatusCancelled
  models.TaskType:
    enum:
    - code_analysis
    - refactoring
    - code_review
    - documentation
    - custom
    type: string
    x-enum-varnames:
    - TaskTypeCodeAnalysis
    - TaskTypeRefactoring
    - TaskTypeCodeReview
    - TaskTypeDocumentation
    - TaskTypeCustom
  models.UpdateCodebaseRequest:
    properties:
      codebaseId:
        type: string
      defaultBranch:
        maxLength: 255
        minLength: 1
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        maxLength: 255
        minLength: 1
        type: string
      tags:
        additionalProperties:
          type: string
        type: object
    required:
    - codebaseId
    type: object
  models.UpdateCodebaseResponse:
    properties:
      codebaseId:
        type: string
      updatedAt:
        type: string
    type: object
  models.UpdateUserRequest:
    properties:
      email:
        type: string
      first_name:
        maxLength: 50
        type: string
      last_name:
        maxLength: 50
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.UserRole'
        enum:
        - owner
        - admin
        - developer
        - viewer
      user_id:
        type: string
    required:
    - user_id
    type: object
  models.UpdateUserResponse:
    properties:
      user:
        $ref: '#/definitions/models.APIUser'
    type: object
  models.UserRole:
    enum:
    - owner
    - admin
    - developer
    - viewer
    type: string
    x-enum-comments:
      RoleAdmin: Manage users, all projects
      RoleDeveloper: Create/manage own projects
      RoleOwner: Full access to everything
      RoleViewer: Read-only access
    x-enum-descriptions:
    - Full access to everything
    - Manage users, all projects
    - Create/manage own projects
    - Read-only access
    x-enum-varnames:
    - RoleOwner
    - RoleAdmin
    - RoleDeveloper
    - RoleViewer
  models.UserStatus:
    enum:
    - active
    - inactive
    - pending
    - suspended
    type: string
    x-enum-varnames:
    - UserStatusActive
    - UserStatusInactive
    - UserStatusPending
    - UserStatusSuspended
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for creating and managing AI-powered code refactoring agents
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Code Refactor Tool API
  version: "1.0"
paths:
  /agents:
    get:
      description: Get a list of agents with optional pagination
      parameters:
      - description: Token for pagination
        in: query
        name: next_token
        type: string
      - description: Maximum number of results to return
        in: query
        maximum: 100
        minimum: 1
        name: max_results
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of agents
          schema:
            $ref: '#/definitions/ListAgentsResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List all agents
      tags:
      - agents
    post:
      consumes:
      - application/json
      description: Create a new agent for code analysis with the specified repository
      parameters:
      - description: Agent creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/CreateAgentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Agent created successfully
          schema:
            $ref: '#/definitions/CreateAgentResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new agent
      tags:
      - agents
  /agents/{agent_id}:
    put:
      consumes:
      - application/json
      description: Update an agent's configuration and settings
      parameters:
      - description: Agent ID
        in: path
        name: agent_id
        required: true
        type: string
      - description: Agent update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/UpdateAgentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Agent updated successfully
          schema:
            $ref: '#/definitions/UpdateAgentResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Agent not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update an existing agent
      tags:
      - agents
  /agents/{id}:
    delete:
      description: Delete an agent and its associated resources
      parameters:
      - description: Agent ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Agent deleted successfully
          schema:
            $ref: '#/definitions/DeleteAgentResponse'
        "400":
          description: Invalid agent ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Agent not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete an agent by ID
      tags:
      - agents
    get:
      description: Retrieve agent information by agent ID
      parameters:
      - description: Agent ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Agent found
          schema:
            $ref: '#/definitions/GetAgentResponse'
        "400":
          description: Invalid agent ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Agent not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get an agent by ID
      tags:
      - agents
  /api/v1/projects/{project_id}/tasks:
    get:
      description: List all tasks for a specific project with optional filtering
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Filter by task status
        enum:
        - pending
        - in_progress
        - completed
        - failed
        - cancelled
        in: query
        name: status
        type: string
      - description: Filter by task type
        enum:
        - code_analysis
        - refactoring
        - code_review
        - documentation
        - custom
        in: query
        name: type
        type: string
      - description: Filter by agent ID
        in: query
        name: agent_id
        type: string
      - description: Number of results to return (default 20, max 100)
        in: query
        name: limit
        type: integer
      - description: Number of results to skip (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListTasksResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List tasks for a project
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task for a specific project and agent
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Task creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/CreateTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/CreateTaskResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new task
      tags:
      - tasks
  /api/v1/projects/{project_id}/tasks/execute:
    post:
      consumes:
      - application/json
      description: Create and execute a task immediately (synchronously or asynchronously)
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Task execution request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ExecuteTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Synchronous execution completed
          schema:
            $ref: '#/definitions/ExecuteTaskResponse'
        "202":
          description: Asynchronous execution started
          schema:
            $ref: '#/definitions/ExecuteTaskResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Execute a task immediately
      tags:
      - tasks
  /api/v1/tasks/{id}:
    delete:
      description: Delete a task by its unique identifier
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a task
      tags:
      - tasks
    get:
      description: Retrieve a task by its unique identifier
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetTaskResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a task by ID
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update an existing task's status, output, or metadata
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/UpdateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UpdateTaskResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a task
      tags:
      - tasks
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an access token using a refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RefreshTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Refresh access token
      tags:
      - authentication
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return access tokens
      parameters:
      - description: Sign in request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SignInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Authenticate a user
      tags:
      - authentication
  /auth/signout:
    post:
      consumes:
      - application/json
      description: Sign out a user and invalidate tokens
      parameters:
      - description: Sign out request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignOutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Sign out a user
      tags:
      - authentication
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Sign up request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SignUpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Register a new user
      tags:
      - authentication
  /auth/users:
    get:
      description: List users with optional filtering
      parameters:
      - default: 10
        description: Maximum number of users to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of users to skip
        in: query
        name: offset
        type: integer
      - description: Filter by user role
        in: query
        name: role
        type: string
      - description: Filter by user status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List users
      tags:
      - authentication
    post:
      consumes:
      - application/json
      description: Create a new user account (admin operation)
      parameters:
      - description: Create user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new user (Admin)
      tags:
      - authentication
  /auth/users/{id}:
    delete:
      description: Delete a user account
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete user
      tags:
      - authentication
    get:
      description: Get user information by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get user by ID
      tags:
      - authentication
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update user
      tags:
      - authentication
  /codebases:
    get:
      description: Retrieve a list of codebases with optional pagination and filtering
      parameters:
      - description: Filter by project ID
        in: query
        name: project_id
        type: string
      - description: Tag filter in format key:value
        in: query
        name: tag_filter
        type: string
      - description: Token for pagination
        in: query
        name: next_token
        type: string
      - description: Maximum number of results to return
        in: query
        maximum: 100
        minimum: 1
        name: max_results
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Codebases retrieved successfully
          schema:
            $ref: '#/definitions/models.ListCodebasesResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List codebases
      tags:
      - codebases
  /codebases/{id}:
    delete:
      description: Delete a codebase by its unique identifier
      parameters:
      - description: Codebase ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Codebase deleted successfully
          schema:
            $ref: '#/definitions/models.DeleteCodebaseResponse'
        "400":
          description: Invalid codebase ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Codebase not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a codebase
      tags:
      - codebases
    get:
      description: Retrieve a codebase by its unique identifier
      parameters:
      - description: Codebase ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Codebase retrieved successfully
          schema:
            $ref: '#/definitions/models.GetCodebaseResponse'
        "400":
          description: Invalid codebase ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Codebase not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get a codebase by ID
      tags:
      - codebases
    put:
      consumes:
      - application/json
      description: Update an existing codebase's details
      parameters:
      - description: Codebase ID
        in: path
        name: id
        required: true
        type: string
      - description: Codebase update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCodebaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Codebase updated successfully
          schema:
            $ref: '#/definitions/models.UpdateCodebaseResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Codebase not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a codebase
      tags:
      - codebases
  /health:
    get:
      description: Returns the health status of the service
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            $ref: '#/definitions/HealthCheckResponse'
        "500":
          description: Service is unhealthy
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Health check endpoint
      tags:
      - health
  /projects:
    get:
      description: Retrieve a list of projects with optional pagination and filtering
      parameters:
      - description: Token for pagination
        in: query
        name: next_token
        type: string
      - description: Maximum number of results to return
        in: query
        maximum: 100
        minimum: 1
        name: max_results
        type: integer
      - description: Tag filter in format key:value
        in: query
        name: tag_filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Projects retrieved successfully
          schema:
            $ref: '#/definitions/ListProjectsResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Create a new project for organizing codebases and agents
      parameters:
      - description: Project creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/CreateProjectRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Project created successfully
          schema:
            $ref: '#/definitions/CreateProjectResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new project
      tags:
      - projects
  /projects/{id}:
    delete:
      description: Delete a project by its unique identifier
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project deleted successfully
          schema:
            $ref: '#/definitions/DeleteProjectResponse'
        "400":
          description: Invalid project ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a project
      tags:
      - projects
    get:
      description: Retrieve a project by its unique identifier
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project retrieved successfully
          schema:
            $ref: '#/definitions/GetProjectResponse'
        "400":
          description: Invalid project ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get a project by ID
      tags:
      - projects
    put:
      consumes:
      - application/json
      description: Update an existing project's details
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Project update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/UpdateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Project updated successfully
          schema:
            $ref: '#/definitions/UpdateProjectResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a project
      tags:
      - projects
  /projects/{project_id}/codebases:
    post:
      consumes:
      - application/json
      description: Create a new codebase attached to a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Codebase creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateCodebaseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Codebase created successfully
          schema:
            $ref: '#/definitions/models.CreateCodebaseResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new codebase
      tags:
      - codebases
swagger: "2.0"
