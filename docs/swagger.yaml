basePath: /api/v1
definitions:
  AgentSummary:
    properties:
      agent_id:
        description: Unique identifier for the agent
        example: agent-12345
        type: string
      agent_name:
        description: Agent name
        example: my-code-analyzer
        type: string
      created_at:
        description: Timestamp when the agent was created
        example: "2024-01-15T10:30:00Z"
        type: string
      repository_url:
        description: Repository URL
        example: https://github.com/user/repo
        type: string
      status:
        description: Agent status
        example: ready
        type: string
    type: object
  CreateAgentRequest:
    properties:
      agent_name:
        description: Optional custom agent name
        example: my-code-analyzer
        minLength: 1
        type: string
      ai_config:
        allOf:
        - $ref: '#/definitions/config.AIConfiguration'
        description: Optional AI configuration (defaults to platform default if not
          provided)
      branch:
        description: Optional branch name, defaults to main
        example: main
        minLength: 1
        type: string
      repository_url:
        description: Repository URL to analyze
        example: https://github.com/user/repo
        type: string
    required:
    - repository_url
    type: object
  CreateAgentResponse:
    properties:
      agent_id:
        description: Unique identifier for the agent
        example: agent-12345
        type: string
      agent_version:
        description: Agent version
        example: v1.0.0
        type: string
      created_at:
        description: Timestamp when the agent was created
        example: "2024-01-15T10:30:00Z"
        type: string
      knowledge_base_id:
        description: Knowledge base ID associated with the agent
        example: kb-67890
        type: string
      status:
        description: Agent creation status
        example: created
        type: string
      vector_store_id:
        description: Vector store ID for the knowledge base
        example: vs-abcde
        type: string
    type: object
  CreateProjectRequest:
    properties:
      description:
        description: Optional project summary
        example: A sample project for code analysis
        maxLength: 500
        type: string
      language:
        description: Optional programming language
        enum:
        - go
        - javascript
        - typescript
        - python
        - java
        - csharp
        - rust
        - cpp
        - c
        - ruby
        - php
        - kotlin
        - swift
        - scala
        - other
        example: go
        type: string
      name:
        description: Human-readable project name
        example: my-project
        maxLength: 100
        minLength: 1
        type: string
      tags:
        additionalProperties:
          type: string
        description: Optional user-defined key-value tags
        example:
          env: prod
          team: backend
        type: object
    required:
    - name
    type: object
  CreateProjectResponse:
    properties:
      created_at:
        description: Timestamp when the project was created
        example: "2024-01-15T10:30:00Z"
        type: string
      project_id:
        description: Unique identifier for the project
        example: proj-12345-abcde
        type: string
    type: object
  DeleteAgentResponse:
    properties:
      agent_id:
        description: Agent ID that was deleted
        example: agent-12345
        type: string
      success:
        description: Success indicator
        example: true
        type: boolean
    type: object
  DeleteProjectResponse:
    properties:
      success:
        description: Indicates whether the deletion was successful
        example: true
        type: boolean
    type: object
  ErrorResponse:
    properties:
      code:
        description: Error code
        example: 400
        type: integer
      details:
        description: Optional error details
        example: repository_url is required
        type: string
      message:
        description: Error message
        example: Invalid request parameters
        type: string
    type: object
  GetAgentResponse:
    properties:
      agent_id:
        description: Unique identifier for the agent
        example: agent-12345
        type: string
      agent_name:
        description: Agent name
        example: my-code-analyzer
        type: string
      agent_version:
        description: Agent version
        example: v1.0.0
        type: string
      branch:
        description: Branch name
        example: main
        type: string
      created_at:
        description: Timestamp when the agent was created
        example: "2024-01-15T10:30:00Z"
        type: string
      knowledge_base_id:
        description: Knowledge base ID associated with the agent
        example: kb-67890
        type: string
      repository_url:
        description: Repository URL
        example: https://github.com/user/repo
        type: string
      status:
        description: Agent status
        example: ready
        type: string
      updated_at:
        description: Timestamp when the agent was last updated
        example: "2024-01-15T10:30:00Z"
        type: string
      vector_store_id:
        description: Vector store ID for the knowledge base
        example: vs-abcde
        type: string
    type: object
  GetProjectResponse:
    properties:
      created_at:
        description: Timestamp when the project was created
        example: "2024-01-15T10:30:00Z"
        type: string
      description:
        description: Optional project summary
        example: A sample project for code analysis
        type: string
      language:
        description: Optional programming language
        example: go
        type: string
      metadata:
        additionalProperties:
          type: string
        description: Optional metadata
        example:
          version: 1.0.0
        type: object
      name:
        description: Human-readable project name
        example: my-project
        type: string
      project_id:
        description: Unique identifier for the project
        example: proj-12345-abcde
        type: string
      tags:
        additionalProperties:
          type: string
        description: Optional user-defined key-value tags
        example:
          env: prod
          team: backend
        type: object
      updated_at:
        description: Timestamp when the project was last updated
        example: "2024-01-15T10:30:00Z"
        type: string
    type: object
  HealthCheckResponse:
    properties:
      service:
        description: Service name
        example: code-refactor-tool-api
        type: string
      status:
        description: Service status
        example: healthy
        type: string
      timestamp:
        description: Current timestamp
        example: "2024-01-15T10:30:00Z"
        type: string
      uptime:
        description: Uptime in seconds (optional)
        example: 3600
        type: integer
      version:
        description: Service version
        example: 1.0.0
        type: string
    type: object
  ListAgentsResponse:
    properties:
      agents:
        description: List of agent summaries
        items:
          $ref: '#/definitions/AgentSummary'
        type: array
      next_token:
        description: Token for next page
        example: eyJ0aW1lc3RhbXAiOiIyMDI0LTAxLTE1VDEwOjMwOjAwWiJ9
        type: string
    type: object
  ListProjectsResponse:
    properties:
      next_token:
        description: Token for next page of results
        example: eyJpZCI6InByb2otNjc4OTAifQ==
        type: string
      projects:
        description: List of project summaries
        items:
          $ref: '#/definitions/ProjectSummary'
        type: array
    type: object
  ProjectSummary:
    properties:
      created_at:
        description: Timestamp when the project was created
        example: "2024-01-15T10:30:00Z"
        type: string
      name:
        description: Human-readable project name
        example: my-project
        type: string
      project_id:
        description: Unique identifier for the project
        example: proj-12345-abcde
        type: string
      tags:
        additionalProperties:
          type: string
        description: Optional user-defined key-value tags
        example:
          env: prod
          team: backend
        type: object
    type: object
  UpdateProjectRequest:
    properties:
      description:
        description: Optional project summary
        example: Updated project description
        maxLength: 500
        type: string
      language:
        description: Optional programming language
        enum:
        - go
        - javascript
        - typescript
        - python
        - java
        - csharp
        - rust
        - cpp
        - c
        - ruby
        - php
        - kotlin
        - swift
        - scala
        - other
        example: python
        type: string
      metadata:
        additionalProperties:
          type: string
        description: Optional metadata
        example:
          version: 1.1.0
        type: object
      name:
        description: Optional human-readable project name
        example: updated-project
        maxLength: 100
        minLength: 1
        type: string
      projectID:
        description: Unique identifier for the project
        example: proj-12345-abcde
        type: string
      tags:
        additionalProperties:
          type: string
        description: Optional user-defined key-value tags
        example:
          env: staging
          team: frontend
        type: object
    required:
    - projectID
    type: object
  UpdateProjectResponse:
    properties:
      project_id:
        description: Unique identifier for the project
        example: proj-12345-abcde
        type: string
      updated_at:
        description: Timestamp when the project was last updated
        example: "2024-01-15T11:30:00Z"
        type: string
    type: object
  config.AIConfiguration:
    properties:
      bedrock:
        allOf:
        - $ref: '#/definitions/config.BedrockAIRequestConfig'
        description: Bedrock configuration (only used if provider is "bedrock")
      local:
        allOf:
        - $ref: '#/definitions/config.LocalAIRequestConfig'
        description: Local AI configuration (only used if provider is "local")
      provider:
        example: bedrock
        type: string
    type: object
  config.BedrockAIRequestConfig:
    properties:
      agent_service_role_arn:
        type: string
      foundation_model:
        example: amazon.titan-tg1-large
        type: string
      knowledge_base_service_role_arn:
        type: string
      region:
        example: us-west-2
        type: string
    type: object
  config.LocalAIRequestConfig:
    properties:
      chroma_url:
        example: http://localhost:8000
        type: string
      embedding_model:
        example: all-MiniLM-L6-v2
        type: string
      model:
        example: codellama:7b-instruct
        type: string
      ollama_url:
        example: http://localhost:11434
        type: string
    type: object
  models.CodebaseSummary:
    properties:
      codebaseId:
        type: string
      createdAt:
        type: string
      defaultBranch:
        type: string
      name:
        type: string
      projectId:
        type: string
      provider:
        $ref: '#/definitions/models.Provider'
      tags:
        additionalProperties:
          type: string
        type: object
      url:
        type: string
    type: object
  models.CreateCodebaseRequest:
    properties:
      defaultBranch:
        maxLength: 255
        minLength: 1
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
      projectId:
        type: string
      provider:
        $ref: '#/definitions/models.Provider'
      tags:
        additionalProperties:
          type: string
        type: object
      url:
        maxLength: 2048
        type: string
    required:
    - defaultBranch
    - name
    - projectId
    - provider
    - url
    type: object
  models.CreateCodebaseResponse:
    properties:
      codebaseId:
        type: string
      createdAt:
        type: string
    type: object
  models.DeleteCodebaseResponse:
    properties:
      success:
        type: boolean
    type: object
  models.GetCodebaseResponse:
    properties:
      codebaseId:
        type: string
      createdAt:
        type: string
      defaultBranch:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      projectId:
        type: string
      provider:
        $ref: '#/definitions/models.Provider'
      tags:
        additionalProperties:
          type: string
        type: object
      updatedAt:
        type: string
      url:
        type: string
    type: object
  models.ListCodebasesResponse:
    properties:
      codebases:
        items:
          $ref: '#/definitions/models.CodebaseSummary'
        type: array
      nextToken:
        type: string
    type: object
  models.Provider:
    enum:
    - github
    - gitlab
    - bitbucket
    - custom
    type: string
    x-enum-comments:
      ProviderBitbucket: Bitbucket repository provider
      ProviderCustom: Custom repository provider
      ProviderGitHub: GitHub repository provider
      ProviderGitLab: GitLab repository provider
    x-enum-descriptions:
    - GitHub repository provider
    - GitLab repository provider
    - Bitbucket repository provider
    - Custom repository provider
    x-enum-varnames:
    - ProviderGitHub
    - ProviderGitLab
    - ProviderBitbucket
    - ProviderCustom
  models.UpdateCodebaseRequest:
    properties:
      codebaseId:
        type: string
      defaultBranch:
        maxLength: 255
        minLength: 1
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        maxLength: 255
        minLength: 1
        type: string
      tags:
        additionalProperties:
          type: string
        type: object
    required:
    - codebaseId
    type: object
  models.UpdateCodebaseResponse:
    properties:
      codebaseId:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for creating and managing AI-powered code refactoring agents
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Code Refactor Tool API
  version: "1.0"
paths:
  /agents:
    get:
      description: Get a list of agents with optional pagination
      parameters:
      - description: Token for pagination
        in: query
        name: next_token
        type: string
      - description: Maximum number of results to return
        in: query
        maximum: 100
        minimum: 1
        name: max_results
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of agents
          schema:
            $ref: '#/definitions/ListAgentsResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List all agents
      tags:
      - agents
    post:
      consumes:
      - application/json
      description: Create a new agent for code analysis with the specified repository
      parameters:
      - description: Agent creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/CreateAgentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Agent created successfully
          schema:
            $ref: '#/definitions/CreateAgentResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new agent
      tags:
      - agents
  /agents/{id}:
    delete:
      description: Delete an agent and its associated resources
      parameters:
      - description: Agent ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Agent deleted successfully
          schema:
            $ref: '#/definitions/DeleteAgentResponse'
        "400":
          description: Invalid agent ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Agent not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete an agent by ID
      tags:
      - agents
    get:
      description: Retrieve agent information by agent ID
      parameters:
      - description: Agent ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Agent found
          schema:
            $ref: '#/definitions/GetAgentResponse'
        "400":
          description: Invalid agent ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Agent not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get an agent by ID
      tags:
      - agents
  /codebases:
    get:
      description: Retrieve a list of codebases with optional pagination and filtering
      parameters:
      - description: Filter by project ID
        in: query
        name: project_id
        type: string
      - description: Tag filter in format key:value
        in: query
        name: tag_filter
        type: string
      - description: Token for pagination
        in: query
        name: next_token
        type: string
      - description: Maximum number of results to return
        in: query
        maximum: 100
        minimum: 1
        name: max_results
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Codebases retrieved successfully
          schema:
            $ref: '#/definitions/models.ListCodebasesResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List codebases
      tags:
      - codebases
  /codebases/{id}:
    delete:
      description: Delete a codebase by its unique identifier
      parameters:
      - description: Codebase ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Codebase deleted successfully
          schema:
            $ref: '#/definitions/models.DeleteCodebaseResponse'
        "400":
          description: Invalid codebase ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Codebase not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a codebase
      tags:
      - codebases
    get:
      description: Retrieve a codebase by its unique identifier
      parameters:
      - description: Codebase ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Codebase retrieved successfully
          schema:
            $ref: '#/definitions/models.GetCodebaseResponse'
        "400":
          description: Invalid codebase ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Codebase not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get a codebase by ID
      tags:
      - codebases
    put:
      consumes:
      - application/json
      description: Update an existing codebase's details
      parameters:
      - description: Codebase ID
        in: path
        name: id
        required: true
        type: string
      - description: Codebase update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCodebaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Codebase updated successfully
          schema:
            $ref: '#/definitions/models.UpdateCodebaseResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Codebase not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a codebase
      tags:
      - codebases
  /health:
    get:
      description: Returns the health status of the service
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            $ref: '#/definitions/HealthCheckResponse'
        "500":
          description: Service is unhealthy
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Health check endpoint
      tags:
      - health
  /projects:
    get:
      description: Retrieve a list of projects with optional pagination and filtering
      parameters:
      - description: Token for pagination
        in: query
        name: next_token
        type: string
      - description: Maximum number of results to return
        in: query
        maximum: 100
        minimum: 1
        name: max_results
        type: integer
      - description: Tag filter in format key:value
        in: query
        name: tag_filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Projects retrieved successfully
          schema:
            $ref: '#/definitions/ListProjectsResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Create a new project for organizing codebases and agents
      parameters:
      - description: Project creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/CreateProjectRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Project created successfully
          schema:
            $ref: '#/definitions/CreateProjectResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new project
      tags:
      - projects
  /projects/{id}:
    delete:
      description: Delete a project by its unique identifier
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project deleted successfully
          schema:
            $ref: '#/definitions/DeleteProjectResponse'
        "400":
          description: Invalid project ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a project
      tags:
      - projects
    get:
      description: Retrieve a project by its unique identifier
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project retrieved successfully
          schema:
            $ref: '#/definitions/GetProjectResponse'
        "400":
          description: Invalid project ID
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get a project by ID
      tags:
      - projects
    put:
      consumes:
      - application/json
      description: Update an existing project's details
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Project update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/UpdateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Project updated successfully
          schema:
            $ref: '#/definitions/UpdateProjectResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a project
      tags:
      - projects
  /projects/{project_id}/codebases:
    post:
      consumes:
      - application/json
      description: Create a new codebase attached to a project
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: Codebase creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateCodebaseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Codebase created successfully
          schema:
            $ref: '#/definitions/models.CreateCodebaseResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new codebase
      tags:
      - codebases
swagger: "2.0"
